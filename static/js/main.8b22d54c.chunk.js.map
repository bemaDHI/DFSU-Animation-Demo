{"version":3,"sources":["store/BirdTracksStore.ts","store/AuthStore.ts","store/NotificationsStore.ts","store/APIStore.ts","store/RadarsStore.ts","store/MapStore.ts","common/layers/binary-grid-layer-vertex.glsl.js","common/layers/BinaryGridLayer.jsx","common/layers/binary-grid-layer-fragment.glsl.js","store/AnalysisStore.ts","store/root.ts","common/Navigation/Navbar.tsx","common/layers/TileLayer.ts","pages/AnalysisPage/AnalysisMap.tsx","pages/AnalysisPage/AnalysisControls.tsx","pages/AnalysisPage/AnalysisLegend.tsx","common/Notifications/AlertSnackbar.tsx","pages/AnalysisPage/AnalysisPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DATE_MIN","Date","DATE_MAX","Bird","root","id","lastObsDateTime","alertLevel","classification","locations","ETASeconds","_lastObsDateTime","_alertLevel","this","newObsDateTime","newAlertLevel","BirdTracksStore","tracks","_selectedTrack","tracksLayerID","_tracksLayer","_trackPathsLayer","trackPaths2DLayer","tracks2DLayer","_flagBirdColorUpdate","_flagBirdTrackUpdate","_flagLineColorUpdate","_visualizationParameter","_numSecondsToKeep","_maxNumberOfTracks","shouldFilterTime","shouldFilterTrackLength","classificationColorMapping","riskColorMapping","makeAutoObservable","isRiskCalculationsEnabled","config","modules","trackRiskLevel","settings","classificationDefinitions","riskDefinitions","initilizeLayers","performance","retainTimeOptionsDefault","maxTracksOptionsDefault","Array","clearTracks","param","newNumSecondsToKeep","maxNumber","oldTracksArray","newTracksArray","i","Math","min","length","flagBirdTrackUpdate","flagBirdColorUpdate","track","mapStore","camera2DViewState","longitude","latitude","zoom","currentZoomLevel","_cameraBirdPointOfViewState","endLongtude","endLatitude","startLongitude","startLatitude","bearing","positionsToBearing","pitch","maxPitch","position","flagLineColorUpdate","updateTracks2DLayer","updateTrackPaths2DLayer","bird","minDate","now","trackToUpdate","oldestTrack","prevTrack","find","slice","selectedTrack","updateTracksLayer","updateTrackPathsLayer","getTime","toString","ScenegraphLayer","data","pickable","scenegraph","apiStore","frontendHost","getPosition","getScale","_lighting","getColor","visualizationParameter","colorMap","name","colorGFX","onClick","object","layer","updateTriggers","highlightTrackID","ScatterplotLayer","stroked","filled","radiusScale","radiusMinPixels","radiusMaxPixels","lineWidthMinPixels","lineWidthMaxPixels","getRadius","d","getFillColor","getLineColor","getLineWidth","PathLayer","widthMinPixels","widthMaxPixels","billboard","getPath","map","location","getWidth","AuthStore","accessToken","refreshToken","Alert","alertType","message","shouldAutoHide","duration","NotificationsStore","alert","_isSnackbarClosed","delayMS","isSnackbarClosed","setTimeout","removeAlert","isClosed","APIStore","auth","api","authApi","login","flow","username","password","fetch","method","body","JSON","stringify","headers","response","status","notificationsStore","addAlert","json","fetchTurbines","isTokenExpired","fetchTracks","from","to","maxResultCount","toISOString","fetchTracksLastBefore","datetime","fetchWindTurbineAlerts","fromDate","toDate","turbineId","fetchTNOStatistics","fetchAnalysisTimesteps","fromDateTime","toDateTime","onError","blob","currentPage","Radar","RadarRadius","radarId","radius","labelLocation","radarCoords","coordinateConverter","forward","yCoordinate","labelLngLatCoords","inverse","RadarsStore","radars","radarsLayer","radars3DLayer","radarsRadius3DLayer","radarLayersID","_radarsRadiusLayer","radarsRadiuses","radarsRadius2DTextLayer","radarsRadius3DTextLayer","radar","flat","updateRadarsLayer","updateRadars3DLayer","updateRadarsRadiusLayer","updateRadarsRadius3DLayer","updateRadarsRadius2DTextLayer","updateRadarsRadius3DTextLayer","IconLayer","getIcon","url","height","width","mask","sizeScale","getSize","getOrientation","_animations","speed","radarRadius","TextLayer","r","getText","getAngle","getTextAnchor","getAlignmentBaseline","sizeUnits","MapStore","_viewportType","_cameraType","_cameraTraditionalView","_cameraFirstPersonView","_camera2DViewState","_cameraTraditionalViewState","_cameraFirstPersonViewState","_cameraOrthographicView","_cameraBirdPointOfView","_areMapLayersInitialized","MapView","controller","orthographic","nearZMultiplier","FirstPersonView","moveSpeed","near","far","cameraConfig","cameraDefaults","View2D","View3D","ViewFirstPerson","proj4","defs","viewState","Error","viewportType","cameraType","areMapLayersInitialized","initializeLayers","isInitialized","tracksStore","radarsStore","analysisStore","longitude1","latitude1","longitude2","latitude2","y","sin","cos","x","atan2","PI","getVertexShader","numBands","BinaryGridLayer","props","colorPoints","vs","fs","project","project32","picking","getAttributeManager","add","positions","size","type","GL","FLOAT","fp64","use64bitPositions","update","attribute","value","state","mesh","noAlloc","colors","_createMesh","setState","_getCoordinateUniforms","oldProps","changeFlags","extensionsChanged","gl","context","model","delete","_getModel","invalidateAll","attributeManager","colorsBuffer","invalidate","getShaders","_imageCoordinateSystem","disablePicking","verticesBuffer","vertexCount","Model","Object","assign","geometry","Geometry","drawMode","TRIANGLES","isInstanced","opts","uniforms","moduleParameters","pickingActive","colorBandUniforms","forEach","colorPoint","index","convertStringToColor","color","setUniforms","draw","coordinateConversion","Layer","rgbString","includes","convertRgbaStringToNumber","convertRgbStringToNumber","rgbaString","values","replace","split","parseInt","round","parseFloat","layerName","zip","useWebWorkers","AnalysisStore","_binaryGridLayer","_directionLayer","isLoaded","densityPositionsBuffer","directionPositionsBuffer","densityColorAttributeBuffers","directionBuffers","densityColorAttributeBufferEmpty","directionBufferEmpty","_fromDate","_toDate","timestepDateTimesDensity","timestepDateTimesDirection","_currentTimestepIndex","_selectedParameter","minDensityValue","maxDensityValue","_legendScale","_selectedSummaryID","gridLayerID","_interval","isPlaying","retrieveTimeSteps","summary","analysis","summaryIDs","ID","densityID","errorMessage","densityBlob","extractDataFromBlob","directionID","directionBlob","currentTimestepIndex","renderDensityGridLayer","renderDirectionLayer","reader","getEntries","entries","verticesIndex","findIndex","entry","filename","zipEntryToBuffer","statsIndex","zipEntryToJSON","stats","dateTimes","dateTime","buffers","bufferIndex","buffer","attribBuffer","dfsValuesToColorBuffer","push","Float32Array","legendScale","generateLegendColorPoints","close","getData","arrayBuffer","text","jsonText","parse","startOfDay","addMonths","parameter","interval","scale","date","selectedParameter","setInterval","timestepsLength","clearInterval","pause","attribBufferIndex","currentTimestepDate","binaryGridLayer","toJS","parameters","depthTest","directionAttribBuffer","attributes","u","v","mag","sqrt","dfsValuesBuffer","attributeBuffer","j","currentModulosIndex","modulos","currScale","numIntervalsToMin","floor","ceil","modulo","startingInterval","endingInterval","scaleColors","scaleLinear","domain","range","interpolate","d3","label","RootStore","authStore","_currentPage","_isDrawerOpen","connectionStrings","visualizerURL","authURL","frontendURL","page","isOpen","StoreReactContext","createContext","undefined","useStore","useContext","Navbar","observer","AppBar","Toolbar","style","minHeight","Box","Typography","variant","fontWeight","flexGrow","display","justifyContent","NavItem","active","startIcon","IconButton","edge","aria-label","toggleIsDrawerOpen","styled","Button","createTileLayer","TileLayer","maxRequests","onViewportLoad","autoHighlight","highlightColor","minZoom","maxZoom","tileSize","devicePixelRatio","renderSubLayers","tile","bbox","west","south","east","north","BitmapLayer","image","bounds","AnalysisMap","React","useEffect","isDrawerOpen","layers","radarsRadiusLayer","splice","directionLayer","lightingEffect","LightingEffect","directionalLight","DirectionalLight","intensity","direction","ambientLight","AmbientLight","initialViewState","getViewState","views","viewport","effects","_animate","clearColor","getTooltip","html","toFixed","textAlign","AnalysisDownloadControls","useState","timestepTemp","setTimestepTemp","currDateStr","format","maxTimestepIndex","flexDirection","alignItems","borderRadius","p","backgroundColor","px","FormControl","margin","InputLabel","Select","labelId","fullWidth","selectedSummaryID","onChange","event","selectedID","target","MenuItem","disableToolbar","inputVariant","isValid","KeyboardButtonProps","previousMonth","Divider","ToggleButtonGroup","ToggleButton","skipToStart","stepBackward","play","stepForward","skipToEnd","Slider","max","valueLabelDisplay","aria-labelledby","newValue","KeyboardDatePicker","AnalysisLegend","mr","component","AlertSnackbar","autoHideDuration","Snackbar","open","onClose","_","reason","removeAlertAfterDelay","handleSnackbarClose","anchorOrigin","vertical","horizontal","severity","transform","elevation","AnalysisPage","overflow","AnalysisControlsContainer","AnalysisControls","AnalysisLegendContainer","theme","createTheme","palette","primary","main","secondary","App","utils","DateFnsUtils","zIndex","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Root","setConfig","store","setStore","StrictMode","Provider","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8b22d54c.chunk.js","sourcesContent":["import { makeAutoObservable } from 'mobx';\r\nimport { ScenegraphLayer } from '@deck.gl/mesh-layers';\r\nimport { PathLayer } from '@deck.gl/layers';\r\nimport { RootStore } from './root';\r\nimport { ScatterplotLayer } from 'deck.gl';\r\n\r\nconst DATE_MIN = new Date(1900, 0, 0);\r\nconst DATE_MAX = new Date(9999, 0, 0);\r\nconst ETA_UNKNOWN = -1;\r\n\r\nexport type Position = number[];\r\n\r\nexport class Bird {\r\n  public id: string;\r\n  public locations: Position[];\r\n  public ETASeconds: number;\r\n  public classification: string;\r\n  private _lastObsDateTime: Date;\r\n  private _alertLevel: string;\r\n\r\n  constructor(private root: RootStore, id: string, lastObsDateTime: Date, alertLevel: string, classification: string, locations: Position[]) {\r\n    this.id = id;\r\n    this._lastObsDateTime = lastObsDateTime;\r\n    this._alertLevel = alertLevel;\r\n    this.locations = locations;\r\n    this.ETASeconds = ETA_UNKNOWN;\r\n    this.classification = classification;\r\n  }\r\n\r\n  get lastObsDateTime(): Date {\r\n    return this._lastObsDateTime;\r\n  }\r\n\r\n  set lastObsDateTime(newObsDateTime: Date) {\r\n    this._lastObsDateTime = newObsDateTime;\r\n  }\r\n\r\n  get alertLevel(): string {\r\n    return this._alertLevel;\r\n  }\r\n\r\n  set alertLevel(newAlertLevel: string) {\r\n    this._alertLevel = newAlertLevel;\r\n  }\r\n\r\n  get color(): number[] {\r\n    switch(this._alertLevel) {\r\n      case 'Low':    return [141, 228, 152];\r\n      case 'Medium': return [280, 216, 138];\r\n      case 'High':   return [241, 119, 119];\r\n      default:       return [77, 77, 77];\r\n    }\r\n  }\r\n\r\n  get colorStr(): string {\r\n    switch(this._alertLevel) {\r\n      case 'Low':    return 'rgb(81, 168, 92)';\r\n      case 'Medium': return 'rgb(240, 176, 98)';\r\n      case 'High':   return 'rgb(201, 79, 79)';\r\n      default:       return 'rgb(77, 77, 77)';\r\n    }\r\n  }\r\n}\r\n\r\ntype VisualizationParameter = 'Risk' | 'Classification';\r\ntype ColorMapping = {\r\n  name: string;\r\n  label: string;\r\n  colorUI: string;\r\n  colorGFX: [number, number, number, number | undefined];\r\n}\r\n\r\nexport class BirdTracksStore {\r\n  public tracks: Bird[];\r\n  private _selectedTrack: Bird | null;\r\n\r\n  // Track layers.\r\n  private tracksLayerID!: string;\r\n  private _tracksLayer: any;\r\n  private _trackPathsLayer: any;\r\n  public trackPaths2DLayer!: PathLayer<Bird>;\r\n  public tracks2DLayer!: ScatterplotLayer<Bird>;\r\n\r\n  // Update triggers for DeckGL layer.\r\n  private _flagBirdColorUpdate: number;\r\n  private _flagBirdTrackUpdate: number;\r\n  private _flagLineColorUpdate: number;\r\n\r\n  // Visualization parameters\r\n  private _visualizationParameter: VisualizationParameter;\r\n  private _numSecondsToKeep: number;\r\n  private _maxNumberOfTracks: number;\r\n  public shouldFilterTime: boolean;\r\n  public shouldFilterTrackLength: boolean;\r\n\r\n  // Color mappings (from config).\r\n  public classificationColorMapping: ColorMapping[];\r\n  public riskColorMapping: ColorMapping[];\r\n\r\n  constructor(private root: RootStore) {\r\n    makeAutoObservable(this, {\r\n      tracks: false,\r\n      classificationColorMapping: false,\r\n      riskColorMapping: false,\r\n    });\r\n\r\n    this.shouldFilterTime = true;\r\n    this.shouldFilterTrackLength = true;\r\n\r\n    const isRiskCalculationsEnabled = root.config.modules.trackRiskLevel;\r\n    this._visualizationParameter = isRiskCalculationsEnabled ? 'Risk' : 'Classification';\r\n\r\n    this.classificationColorMapping = this.root.config.settings.classificationDefinitions as ColorMapping[];\r\n    this.riskColorMapping = this.root.config.settings.riskDefinitions as ColorMapping[];\r\n\r\n    this._selectedTrack = null;\r\n    this.initilizeLayers();\r\n\r\n    this._flagBirdColorUpdate = 0;\r\n    this._flagBirdTrackUpdate = 0;\r\n    this._flagLineColorUpdate = 0;\r\n\r\n    this._numSecondsToKeep = root.config.settings.performance.retainTimeOptionsDefault;\r\n    this._maxNumberOfTracks = root.config.settings.performance.maxTracksOptionsDefault;\r\n\r\n    this.tracks = new Array(this._maxNumberOfTracks);\r\n    this.clearTracks();\r\n  }\r\n\r\n  get visualizationParameter(): VisualizationParameter {\r\n    return this._visualizationParameter;\r\n  }\r\n\r\n  set visualizationParameter(param: VisualizationParameter) {\r\n    this._visualizationParameter = param;\r\n  }\r\n\r\n  get tracksLayer(): any {\r\n    return this._tracksLayer;\r\n  }\r\n\r\n  get tracksPathLayer(): any {\r\n    return this._trackPathsLayer;\r\n  }\r\n\r\n  get numSecondsToKeep(): number {\r\n    return this._numSecondsToKeep;\r\n  }\r\n\r\n  set numSecondsToKeep(newNumSecondsToKeep: number) {\r\n    this._numSecondsToKeep = newNumSecondsToKeep;\r\n  }\r\n\r\n  get maxNumberOfTracks(): number {\r\n    return this._maxNumberOfTracks;\r\n  }\r\n\r\n  set maxNumberOfTracks(maxNumber: number) {\r\n    this._maxNumberOfTracks = maxNumber;\r\n    const oldTracksArray = this.tracks;\r\n    const newTracksArray = new Array(this._maxNumberOfTracks);\r\n    \r\n    // Copy over tracks from old array to new array.\r\n    let i = 0;\r\n    while (i < Math.min(oldTracksArray.length, newTracksArray.length)) {\r\n      newTracksArray[i] = oldTracksArray[i];\r\n      ++i;\r\n    }\r\n\r\n    // Fill any left over spots in array with with blank tracks.\r\n    while (i < newTracksArray.length) {\r\n      newTracksArray[i] = new Bird(this.root, '', DATE_MIN, 'Low', 'UNDEFINED', [[0, 0, 0]]);\r\n      ++i;\r\n    }\r\n\r\n    this.tracks = newTracksArray;\r\n\r\n    this.flagBirdTrackUpdate();\r\n    this.flagBirdColorUpdate();\r\n  }\r\n\r\n  get selectedTrack() {\r\n    return this._selectedTrack;\r\n  }\r\n\r\n  set selectedTrack(track: Bird | null) {\r\n    this._selectedTrack = track;\r\n\r\n    if (this._selectedTrack && this._selectedTrack.locations && this._selectedTrack.locations.length > 0) {\r\n      this.root.mapStore.camera2DViewState = {\r\n        ...this.root.mapStore.camera2DViewState,\r\n        longitude: this._selectedTrack.locations[0][0],\r\n        latitude: this._selectedTrack.locations[0][1],\r\n        zoom: this.root.mapStore.currentZoomLevel,\r\n      };\r\n\r\n      this.root.mapStore._cameraBirdPointOfViewState = {\r\n        ...this.root.mapStore.camera2DViewState,\r\n        longitude: this._selectedTrack.locations[0][0],\r\n        latitude: this._selectedTrack.locations[0][1],\r\n        zoom: this.root.mapStore.currentZoomLevel,\r\n      };\r\n    }\r\n\r\n    // Update BirdPOV\r\n    if (this._selectedTrack) {\r\n\r\n      // Estimate bearing.\r\n      const startLongitude = this._selectedTrack.locations[0][0];\r\n      const startLatitude  = this._selectedTrack.locations[0][1];\r\n      let endLongtude;\r\n      let endLatitude;\r\n\r\n      if (this._selectedTrack.locations.length > 1) {\r\n        endLongtude = this._selectedTrack.locations[1][0];\r\n        endLatitude = this._selectedTrack.locations[1][1];\r\n\r\n      // Focus on turbines if no second position is present.\r\n      } else {\r\n        endLongtude = 10.659090;\r\n        endLatitude = 56.156590;\r\n      }\r\n\r\n      const bearing = this.root.mapStore.positionsToBearing(endLongtude, endLatitude, startLongitude, startLatitude);\r\n\r\n      this.root.mapStore._cameraBirdPointOfViewState = {\r\n        longitude: this._selectedTrack.locations[0][0],\r\n        latitude: this._selectedTrack.locations[0][1],\r\n        zoom: 1,\r\n        pitch: 0,\r\n        bearing: bearing,\r\n        maxPitch: 85,\r\n        position: [0, 0, this._selectedTrack.locations[0][2]],\r\n      };\r\n    }\r\n\r\n    this.flagBirdColorUpdate();\r\n    this.flagLineColorUpdate();\r\n    this.updateTracks2DLayer();\r\n    this.updateTrackPaths2DLayer();\r\n  }\r\n\r\n  updateTrack(bird: Bird) {\r\n  \r\n    // Reset old tracks.\r\n    const minDate: Date = this.shouldFilterTime ? new Date(Date.now() - this._numSecondsToKeep * 1000) : DATE_MIN;\r\n    for (let i = 0; i < this.tracks.length; ++i) {\r\n      const track = this.tracks[i];\r\n      if (track.lastObsDateTime < minDate) {\r\n        track.id = '';\r\n        track.lastObsDateTime = DATE_MIN;\r\n        track.alertLevel = 'low';\r\n        track.locations = [[]];\r\n      }\r\n    }\r\n\r\n    let oldestTrack = new Bird(this.root, '', DATE_MAX, 'Low', 'UNDEFINED', [[0, 0, 0]]);\r\n    for (let i = 0; i < this.tracks.length; ++i) {\r\n      const track = this.tracks[i];\r\n      if (track.lastObsDateTime < oldestTrack.lastObsDateTime) {\r\n        oldestTrack = track;\r\n      }\r\n    }\r\n\r\n    let trackToUpdate: Bird; \r\n    const prevTrack =  this.tracks.find(track => {\r\n      return track.id === bird.id\r\n    }) as Bird;\r\n    if (prevTrack) {\r\n      trackToUpdate = prevTrack;\r\n    } else {\r\n      trackToUpdate = oldestTrack;\r\n    }\r\n\r\n    trackToUpdate.id = bird.id;\r\n    trackToUpdate.lastObsDateTime = bird.lastObsDateTime;\r\n    trackToUpdate.alertLevel = bird.alertLevel;\r\n    trackToUpdate.locations = this.shouldFilterTrackLength ? bird.locations.slice(0, 100) :  bird.locations;\r\n\r\n    if (bird.id === (this.selectedTrack?.id ?? '')) {\r\n      this.selectedTrack = new Bird(\r\n        this.root,\r\n        trackToUpdate.id, \r\n        trackToUpdate.lastObsDateTime,\r\n        trackToUpdate.alertLevel, \r\n        trackToUpdate.classification, \r\n        trackToUpdate.locations\r\n      );\r\n    }\r\n\r\n    this.flagBirdTrackUpdate();\r\n    this.flagBirdColorUpdate();\r\n    this.flagLineColorUpdate();\r\n\r\n    this.updateTracksLayer();\r\n    this.updateTracks2DLayer();\r\n    this.updateTrackPathsLayer();\r\n    this.updateTrackPaths2DLayer();\r\n  }\r\n\r\n  public clearTracks() {\r\n    for (let i = 0; i < this.tracks.length; ++i) {\r\n      this.tracks[i] = new Bird(this.root, '', DATE_MIN, 'Low', 'UNDEFINED', [[0, 0, 0]]);\r\n    }\r\n\r\n    this.flagBirdTrackUpdate();\r\n    this.flagBirdColorUpdate();\r\n    this.flagLineColorUpdate();\r\n\r\n    this.updateTracksLayer();\r\n    this.updateTracks2DLayer();\r\n    this.updateTrackPathsLayer();\r\n    this.updateTrackPaths2DLayer();\r\n  }\r\n\r\n  public initilizeLayers() {\r\n    this.tracksLayerID = `Tracks-Layer-${new Date().getTime().toString()}`;\r\n    this.updateTracks2DLayer();\r\n    this.updateTracksLayer();\r\n    this.updateTrackPathsLayer();\r\n    this.updateTrackPaths2DLayer();\r\n  }\r\n\r\n  updateTracksLayer() {\r\n    this._tracksLayer = new ScenegraphLayer({\r\n      id: this.tracksLayerID,\r\n      data: this.tracks,\r\n      pickable: true,\r\n      scenegraph: `${this.root.apiStore.frontendHost}/bird.glb` as any,\r\n      getPosition: (track: any) => track.locations[0],\r\n      // getOrientation: (track: any) => {\r\n      //   const firstLocation = track.locations[0];\r\n      //   const secondLocation = track.locations[1];\r\n      //   const direction = Math.atan2(secondLocation[1] - firstLocation[1], secondLocation[0] - firstLocation[0]) * 180 / Math.PI - 90;\r\n      //   return [0, direction, 90]\r\n      // },\r\n      getScale: (track: any) => [10, 10, 10],\r\n      // getScale: (track: any) => {\r\n      //   const scale = 1.6 ** (21.01 - zoom);\r\n      //   return [scale, scale, scale]; \r\n      // },\r\n      _lighting: 'pbr',\r\n      getColor: (track: any) => {\r\n        if (this.selectedTrack && this.selectedTrack.id === track.id) {\r\n          return [255, 0, 255];\r\n        }\r\n        if (this.visualizationParameter === 'Risk') {\r\n          return this.riskColorMapping\r\n            .find(colorMap => colorMap.name === track.alertLevel)\r\n            ?.colorGFX ?? [77, 77, 77];\r\n        } else {\r\n          return this.classificationColorMapping\r\n            .find(colorMap => colorMap.name === track.classification)\r\n            ?.colorGFX ?? [77, 77, 77];\r\n        }\r\n      },\r\n      onClick: ({ object, layer }) => {\r\n        // Store copy of track in case it is removed by time out.\r\n        this.selectedTrack = new Bird(this.root, object.id, object.lastObsDateTime, object.alertLevel, object.classification, object.locations); \r\n      },\r\n      updateTriggers: {\r\n        getPosition: this._flagBirdTrackUpdate,\r\n        getColor: this._flagBirdColorUpdate,\r\n      },\r\n    });\r\n  }\r\n\r\n  updateTracks2DLayer() {\r\n    const highlightTrackID = this._selectedTrack?.id ?? '';\r\n\r\n    this.tracks2DLayer = new ScatterplotLayer({\r\n      id: `2D-${this.tracksLayerID}`,\r\n      data: this.tracks,\r\n      pickable: true,\r\n      stroked: true,\r\n      filled: true,\r\n      radiusScale: 1,\r\n      radiusMinPixels: 7,\r\n      radiusMaxPixels: 30,\r\n      lineWidthMinPixels: 1,\r\n      lineWidthMaxPixels: 5,\r\n      getPosition: (track: any) => [track.locations[0][0], track.locations[0][1], 5],\r\n      getRadius: d => 5,\r\n      getFillColor: (track: any) => {\r\n        if (this.visualizationParameter === 'Risk') {\r\n          return this.riskColorMapping\r\n            .find(colorMap => colorMap.name === track.alertLevel)\r\n            ?.colorGFX ?? [77, 77, 77];\r\n        } else {\r\n          return this.classificationColorMapping\r\n            .find(colorMap => colorMap.name === track.classification)\r\n            ?.colorGFX ?? [77, 77, 77];\r\n        }\r\n      },\r\n      getLineColor: (track: Bird) => {\r\n        return highlightTrackID === track.id ? [255, 0, 255] : [0, 0, 0]\r\n      },\r\n      getLineWidth: (track: Bird) => 2,\r\n      updateTriggers: {\r\n        getPosition: this._flagBirdTrackUpdate,\r\n        getFillColor: this._flagBirdColorUpdate,\r\n        getLineColor: this._flagLineColorUpdate,\r\n        getLineWidth: this._flagLineColorUpdate,\r\n      },\r\n      onClick: ({ object, layer }) => {\r\n        // Store copy of track in case it is removed by time out.\r\n        this.selectedTrack = new Bird(this.root, object.id, object.lastObsDateTime, object.alertLevel, object.classification, object.locations); \r\n      },\r\n    });\r\n  }\r\n\r\n  updateTrackPathsLayer() {\r\n    this._trackPathsLayer = new PathLayer({\r\n      id: `Path-${this.tracksLayerID}`,\r\n      data: this.tracks,\r\n      pickable: false,\r\n      // widthScale: 3,,\r\n      widthMinPixels: 1,\r\n      widthMaxPixels: 1,\r\n      billboard: true,\r\n      getPath: (track: any) => track.locations,\r\n      getColor: (track: any) => {\r\n        if (this.selectedTrack && this.selectedTrack.id === track.id) {\r\n          return [255, 0, 255];\r\n        }\r\n        if (this.visualizationParameter === 'Risk') {\r\n          return this.riskColorMapping\r\n            .find(colorMap => colorMap.name === track.alertLevel)\r\n            ?.colorGFX ?? [77, 77, 77];\r\n        } else {\r\n          return this.classificationColorMapping\r\n            .find(colorMap => colorMap.name === track.classification)\r\n            ?.colorGFX ?? [77, 77, 77];\r\n        }\r\n      },\r\n      // getWidth: (track: any) => 1,\r\n      updateTriggers: {\r\n        getPath: this._flagBirdTrackUpdate,\r\n        getColor: this._flagBirdColorUpdate,\r\n      },\r\n    });\r\n  }\r\n\r\n  updateTrackPaths2DLayer() {\r\n    this.trackPaths2DLayer = new PathLayer({\r\n      id: `Path-2D-${this.tracksLayerID}`,\r\n      data: this.tracks,\r\n      pickable: false,\r\n      // widthScale: 3,,\r\n      widthMinPixels: 1,\r\n      billboard: true,\r\n      getPath: (track: any) => track.locations.map((location: any) => [location[0], location[1], 4]),\r\n      getColor: (track: any) => {\r\n        if (this.selectedTrack && track.id === this.selectedTrack.id) {\r\n          return [255, 0, 255];\r\n        }\r\n        if (this.visualizationParameter === 'Risk') {\r\n          return this.riskColorMapping\r\n            .find(colorMap => colorMap.name === track.alertLevel)\r\n            ?.colorGFX ?? [77, 77, 77];\r\n        } else {\r\n          return this.classificationColorMapping\r\n            .find(colorMap => colorMap.name === track.alertLevel)\r\n            ?.colorGFX ?? [77, 77, 77];\r\n        }\r\n      },\r\n      getWidth: (track: any) => 1,\r\n      updateTriggers: {\r\n        getPath: this._flagBirdTrackUpdate,\r\n        getColor: this._flagBirdColorUpdate,\r\n      },\r\n    });\r\n  }\r\n\r\n  flagBirdColorUpdate() {\r\n    this._flagBirdColorUpdate = this._flagBirdColorUpdate + 1;\r\n  }\r\n\r\n  flagBirdTrackUpdate() {\r\n    this._flagBirdTrackUpdate = this._flagBirdTrackUpdate + 1;\r\n  }\r\n\r\n  flagLineColorUpdate() {\r\n    this._flagLineColorUpdate = this._flagLineColorUpdate + 1;\r\n  }\r\n}\r\n","import { flow, makeAutoObservable } from 'mobx';\r\nimport { RootStore } from './root';\r\n\r\nexport class AuthStore {\r\n  public accessToken: string | null;\r\n  public refreshToken: string | null;\r\n\r\n  constructor(private root: RootStore) {\r\n    makeAutoObservable(this);\r\n    this.accessToken = null;\r\n    this.refreshToken = null;\r\n  }\r\n\r\n  // public login = flow(function* (this: AuthStore, username, password) {\r\n  //   const response = yield this.root.apiStore.login(username, password);\r\n  //   if (response !== null) {\r\n  //     this.accessToken = response.accessToken.token;\r\n  //     this.refreshToken = response.refreshToken.token;\r\n\r\n  //     // TODO Move this out of here. Shouldn't be part of the login process.\r\n  //     if (this.root.config.modules.turbineAlerts) {\r\n  //       const turbinesResponse = yield this.root.apiStore.fetchTurbines();\r\n  //       if (turbinesResponse !== null) {\r\n  //         const turbineStore = this.root.turbinesStore;\r\n  //         const turbines = turbinesResponse.map((turbine: any) => new Turbine(turbineStore, turbine.name, 'Low', turbine.location.coordinates, new Date()));\r\n  //         turbineStore.turbines = turbines;\r\n  //       }\r\n  //     }\r\n\r\n  //     this.root.currentPage = 'live';\r\n  //   }\r\n  // })\r\n}","import { makeAutoObservable } from 'mobx';\r\nimport { RootStore } from './root';\r\n\r\ntype AlertType = 'info' | 'warning' | 'error' | 'success';\r\n\r\nexport class Alert {\r\n    public id: string;\r\n    public alertType: AlertType\r\n    public message: string;\r\n    public shouldAutoHide: boolean;\r\n    public duration: number;\r\n\r\n    constructor(id: string, alertType: AlertType, message: string, shouldAutoHide: boolean, duration: number = 500) {\r\n        this.id = id;\r\n        this.alertType = alertType; \r\n        this.message = message;\r\n        this.shouldAutoHide = shouldAutoHide;\r\n        this.duration = duration;\r\n    }\r\n}\r\n\r\nclass NotificationsStore {\r\n    public alert: Alert | null;\r\n    private _isSnackbarClosed: boolean;\r\n\r\n    constructor(private root: RootStore) {\r\n        makeAutoObservable(this);\r\n        this.alert = null;\r\n        this._isSnackbarClosed = false;\r\n    }\r\n\r\n    public addAlert(alert: Alert) {\r\n        this.alert = alert;\r\n    }\r\n\r\n    public removeAlert(id: string) {\r\n        if (this.alert && this.alert.id === id) {\r\n            this.alert = null;\r\n        }\r\n    }\r\n\r\n    public removeAlertAfterDelay(id: string, delayMS: number) {\r\n        this.isSnackbarClosed = true;\r\n        setTimeout(() => {\r\n            this.removeAlert(id);\r\n            this.isSnackbarClosed = false;\r\n        }, delayMS);\r\n    }\r\n\r\n    public get isSnackbarClosed() {\r\n        return this._isSnackbarClosed;\r\n    }\r\n\r\n    public set isSnackbarClosed(isClosed: boolean) {\r\n        this._isSnackbarClosed = isClosed;\r\n    }\r\n}\r\n\r\nexport default NotificationsStore;\r\n","import { makeAutoObservable, flow } from 'mobx';\r\nimport { AuthStore } from './AuthStore';\r\nimport { Alert } from './NotificationsStore';\r\nimport { RootStore } from './root';\r\n\r\nexport class APIStore {\r\n  public api: string;\r\n  public authApi: string;\r\n  public frontendHost: string;\r\n  public auth: AuthStore;\r\n\r\n  constructor(private root: RootStore, auth: AuthStore, api: string, authApi: string, frontendHost: string) {\r\n    makeAutoObservable(this);\r\n    this.api = api;\r\n    this.authApi = authApi;\r\n    this.frontendHost = frontendHost;\r\n    this.auth = auth;\r\n  }\r\n\r\n  public login = flow(function* (this: APIStore, username: string, password: string) {\r\n    const response = yield fetch(`${this.authApi}/api/tokens`, {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n        id: username,\r\n        password: password,\r\n      }),\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n\r\n    if (response.status === 404 || response.status === 400) {\r\n      this.root.notificationsStore.addAlert(new Alert('invalid-login', 'error', 'Invalid username or password. Please try again...', false, 5000));\r\n      return null;\r\n    }\r\n\r\n    return response.json();\r\n  });\r\n\r\n  public fetchTurbines = flow(function* (this: APIStore) {\r\n    const response = yield fetch(`${this.api}/api/WindTurbine?ouputWgs84=true`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${this.auth.accessToken}`\r\n      }\r\n    });\r\n\r\n    if (this.isTokenExpired(response))\r\n      return [];\r\n\r\n    return response.json();\r\n  });\r\n\r\n  public fetchTracks = flow(function* (this: APIStore, from: Date, to: Date, maxResultCount: number) {\r\n    const response = yield fetch(`${this.api}/api/MuseTracks?from=${from.toISOString()}&to=${to.toISOString()}&maxresultcount=${maxResultCount}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${this.auth.accessToken}`\r\n      }\r\n    });\r\n\r\n    if (this.isTokenExpired(response))\r\n      return [];\r\n\r\n    return response.json();\r\n  });\r\n\r\n  public fetchTracksLastBefore = flow(function* (this: APIStore, datetime: Date) {\r\n    const response = yield fetch(`${this.api}/api/MuseTracks/LastBefore?datetime=${datetime.toISOString()}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${this.auth.accessToken}`\r\n      }\r\n    });\r\n\r\n    if (this.isTokenExpired(response))\r\n      return [];\r\n\r\n    return response.json();\r\n  });\r\n\r\n  public fetchWindTurbineAlerts = flow(function* (this: APIStore, fromDate: Date, toDate: Date, turbineId: number) {\r\n    const response = yield fetch(`${this.api}/api/WindTurbine/Alerts?from=${fromDate.toISOString()}&to=${toDate.toISOString()}&windTurbineId=${turbineId}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${this.auth.accessToken}`\r\n      }\r\n    });\r\n\r\n    if (this.isTokenExpired(response))\r\n      return [];\r\n\r\n    return response.json();\r\n  });\r\n\r\n  public fetchTNOStatistics = flow(function* (this: APIStore) {\r\n    const response = yield fetch(`${this.api}/api/TnoStatistics`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${this.auth.accessToken}`\r\n      }\r\n    });\r\n\r\n    if (this.isTokenExpired(response))\r\n      return {};\r\n\r\n    return response.json();\r\n  });\r\n\r\n  public fetchAnalysisTimesteps = flow(function* (this: APIStore, id: string, fromDateTime: Date, toDateTime: Date, onError?: (errorMessage: any) => void) {\r\n    try {\r\n      const response: Response = yield fetch(`${this.root.apiStore.frontendHost}/timesteps.zip`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Authorization': `Bearer ${this.auth.accessToken}`,\r\n          'Accept': 'application/x-zip-compressed',\r\n        }\r\n      });\r\n\r\n      if (this.isTokenExpired(response)) {\r\n        return {};\r\n      }\r\n\r\n      if (response.status === 404 && onError) {\r\n        onError(`Unable to located file with ID: ${id}`);\r\n        return;\r\n      }\r\n\r\n      if (response.status === 500 && onError) {\r\n        onError('No time steps available for selected time period.');\r\n        return;\r\n      }\r\n\r\n      if (response.status !== 200) {\r\n        if (onError) {\r\n          onError('Failed to download time steps...');\r\n        }\r\n        return;\r\n      }\r\n\r\n      const blob = yield response.blob();\r\n      return blob;\r\n\r\n    } catch(error) {\r\n      if (onError) {\r\n        onError('Failed to download time steps...');\r\n      }\r\n    }\r\n  });\r\n\r\n\r\n  private isTokenExpired(response: Response): boolean {\r\n    if (response.status === 401) {\r\n      this.root.notificationsStore.addAlert(new Alert('login-token-expired', 'warning', 'Login expired', true, 5000));\r\n      this.root.currentPage = 'login';\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n}","import { makeAutoObservable } from 'mobx';\r\nimport { RootStore } from './root';\r\nimport { ScatterplotLayer, IconLayer, ScenegraphLayer } from 'deck.gl';\r\nimport { TextLayer } from '@deck.gl/layers';\r\nimport MapStore from './MapStore';\r\n\r\nexport type Position = number[];\r\n\r\nexport class Radar {\r\n  public id: string;\r\n  public location: Position;\r\n\r\n  constructor(id: string, location: Position) {\r\n    this.id = id;\r\n    this.location = location;\r\n  }\r\n}\r\n\r\nexport class RadarRadius {\r\n  public radarId: string;\r\n  public location: Position;\r\n  public radius: number;\r\n  public labelLocation: Position;\r\n  \r\n  constructor(mapStore: MapStore, radarId: string, location: Position, radius: number) {\r\n    this.radarId = radarId;\r\n    this.location = location;\r\n    this.radius = radius;\r\n\r\n    // Determine label location.\r\n    const radarCoords = mapStore.coordinateConverter.forward(this.location);\r\n    const yCoordinate = radarCoords[1] + radius;\r\n    const labelLngLatCoords = mapStore.coordinateConverter.inverse([radarCoords[0], yCoordinate]);\r\n    this.labelLocation = [labelLngLatCoords[0], labelLngLatCoords[1], 2];\r\n  }\r\n}\r\n\r\nexport class RadarsStore {\r\n  public radars: Radar[];\r\n  // public radarsLayer!: ScatterplotLayer<Radar>;\r\n  public radarsLayer!: IconLayer<Radar>;\r\n  public radars3DLayer!: ScenegraphLayer<Radar>;\r\n  public radarsRadius3DLayer!: ScatterplotLayer<RadarRadius>;\r\n  private radarLayersID!: string;\r\n  private _radarsRadiusLayer: any;\r\n  public radarsRadiuses: RadarRadius[];\r\n  public radarsRadius2DTextLayer!: TextLayer<RadarRadius>;\r\n  public radarsRadius3DTextLayer!: TextLayer<RadarRadius>;\r\n\r\n  constructor(private root: RootStore) {\r\n    makeAutoObservable(this, {\r\n      radars: false,\r\n      radarsLayer: false,\r\n      radarsRadiuses: false,\r\n    });\r\n\r\n    this.radars = [\r\n      new Radar('Test Radar 1', [10.667887, 56.156151]),\r\n    ];\r\n\r\n    this.radarsRadiuses = this.radars.map(radar => [\r\n      new RadarRadius(root.mapStore, radar.id, radar.location, 1000),\r\n      new RadarRadius(root.mapStore, radar.id, radar.location, 2000),\r\n      new RadarRadius(root.mapStore, radar.id, radar.location, 3000),\r\n      new RadarRadius(root.mapStore, radar.id, radar.location, 4000),\r\n      new RadarRadius(root.mapStore, radar.id, radar.location, 5000),\r\n      new RadarRadius(root.mapStore, radar.id, radar.location, 6000),\r\n      new RadarRadius(root.mapStore, radar.id, radar.location, 7000),\r\n      new RadarRadius(root.mapStore, radar.id, radar.location, 8000),\r\n      new RadarRadius(root.mapStore, radar.id, radar.location, 9000),\r\n      new RadarRadius(root.mapStore, radar.id, radar.location, 10000),\r\n    ]).flat();\r\n  \r\n    this.initilizeLayers();\r\n  }\r\n\r\n  get radarsRadiusLayer() {\r\n    return this._radarsRadiusLayer;\r\n  }\r\n\r\n  public initilizeLayers() {\r\n    this.radarLayersID = `Radars-Layer-${new Date().getTime().toString()}`\r\n    this.updateRadarsLayer();\r\n    this.updateRadars3DLayer();\r\n    this.updateRadarsRadiusLayer();\r\n    this.updateRadarsRadius3DLayer();\r\n    this.updateRadarsRadius2DTextLayer();\r\n    this.updateRadarsRadius3DTextLayer();\r\n  }\r\n\r\n  updateRadarsLayer() {\r\n    this.radarsLayer = new IconLayer({\r\n      id: `Radar-icon-${this.radarLayersID}`,\r\n      data: this.radars,\r\n      pickable: true,\r\n      getIcon: (radar: any) => ({\r\n        url: `${this.root.apiStore.frontendHost}/icons/Radar.png`,\r\n        height: 256,\r\n        width: 256,\r\n        mask: false,\r\n      }),\r\n      sizeScale: 1,\r\n      getPosition: (radar: any) => [radar.location[0], radar.location[1], 2],\r\n      getSize: (radar: any) => 25,\r\n      getColor: (radar: any) => [100, 100, 100],\r\n    });\r\n  }\r\n\r\n  updateRadars3DLayer() {\r\n    this.radars3DLayer = new ScenegraphLayer({\r\n      id: `Radar-animated-${this.radarLayersID}`,\r\n      data: this.radars,\r\n      pickable: true,\r\n      scenegraph: `${this.root.apiStore.frontendHost}/radar.glb` as any,\r\n      getPosition: (radar: any) => [radar.location[0], radar.location[1], 0],\r\n      getOrientation: (radar: Radar) => [0, 180, 90],\r\n      getColor: (radar: any) => [240, 255, 255],\r\n      sizeScale: 15,\r\n      _animations: {\r\n        '*': { speed: 1 }\r\n      },\r\n      _lighting: 'pbr'\r\n    });\r\n  }\r\n\r\n  // updateRadarsLayer() {\r\n  //   this.radarsLayer = new ScatterplotLayer({\r\n  //     id: this.radarLayersID,\r\n  //     data: this.radars,\r\n  //     pickable: true,\r\n  //     stroked: true,\r\n  //     radiusScale: 1,\r\n  //     lineWidthMinPixels: 1,\r\n  //     getPosition: (radar: any) => [radar.location[0], radar.location[1], 2],\r\n  //     getRadius: d => 40,\r\n  //     getFillColor: (radar: any) => [100, 100, 100],\r\n  //     getLineColor: [0, 0, 0],\r\n  //     // updateTriggers: {\r\n  //       // getPosition: this._flagBirdTrackUpdate,\r\n  //       // getColor: this._flagBirdColorUpdate,\r\n  //     //},\r\n  //   });\r\n  // }\r\n\r\n  updateRadarsRadiusLayer() {\r\n    this._radarsRadiusLayer = new ScatterplotLayer({\r\n      id: `radius-${this.radarLayersID}`,\r\n      data: this.radarsRadiuses,\r\n      pickable: false,\r\n      stroked: true,\r\n      filled: false,\r\n      lineWidthMinPixels: 2,\r\n      getPosition: (radarRadius: any) => [radarRadius.location[0], radarRadius.location[1], 1],\r\n      getRadius: (radarRadius: any) => radarRadius.radius,\r\n      getLineColor: [255, 255, 255, 100],\r\n      // updateTriggers: {\r\n        // getPosition: this._flagBirdTrackUpdate,\r\n        // getColor: this._flagBirdColorUpdate,\r\n      //},\r\n    });\r\n  }\r\n\r\n  updateRadarsRadius2DTextLayer() {\r\n    this.radarsRadius2DTextLayer = new TextLayer({\r\n      id: `radius-label-${this.radarLayersID}`,\r\n      data: this.radarsRadiuses,\r\n      pickable: false,\r\n      getPosition: (r: RadarRadius) => r.labelLocation as any,\r\n      getText: (r: RadarRadius) => `${r.radius}m`,\r\n      getSize: 10,\r\n      getAngle: 0,\r\n      getTextAnchor: 'middle',\r\n      getAlignmentBaseline: 'center',\r\n    });\r\n  }\r\n\r\n  updateRadarsRadius3DTextLayer() {\r\n    this.radarsRadius3DTextLayer = new TextLayer({\r\n      id: `radius-label-${this.radarLayersID}`,\r\n      data: this.radarsRadiuses,\r\n      pickable: false,\r\n      getPosition: (r: RadarRadius) => [r.labelLocation[0], r.labelLocation[1], 50] as any,\r\n      getText: (r: RadarRadius) => `${r.radius}m`,\r\n      getSize: 60,\r\n      getAngle: 0,\r\n      getTextAnchor: 'middle',\r\n      getAlignmentBaseline: 'center',\r\n      billboard: true,\r\n      sizeUnits: 'meters',\r\n    });\r\n  }\r\n\r\n  updateRadarsRadius3DLayer() {\r\n    this.radarsRadius3DLayer = new ScatterplotLayer({\r\n      id: `radius-3D-${this.radarLayersID}`,\r\n      data: this.radarsRadiuses,\r\n      pickable: false,\r\n      stroked: true,\r\n      filled: false,\r\n      lineWidthMinPixels: 2,\r\n      getPosition: (radarRadius: any) => [radarRadius.location[0], radarRadius.location[1], 1],\r\n      getRadius: (radarRadius: any) => radarRadius.radius,\r\n      getLineColor: [255, 255, 255, 100],\r\n      // updateTriggers: {\r\n        // getPosition: this._flagBirdTrackUpdate,\r\n        // getColor: this._flagBirdColorUpdate,\r\n      //},\r\n    });\r\n  }\r\n}\r\n","import { FirstPersonView, MapView } from '@deck.gl/core';\r\nimport { makeAutoObservable } from 'mobx';\r\nimport proj4 from 'proj4';\r\nimport { RootStore } from './root';\r\n\r\ntype ViewPortType = '2D' | '3D'\r\ntype CameraType = 'Traditional' | 'FirstPerson' | 'BirdPOV';\r\n\r\nclass MapStore {\r\n    // Viewport settings.\r\n    private _viewportType: ViewPortType;\r\n    private _cameraType: CameraType;\r\n    public _cameraTraditionalView: MapView;\r\n    public _cameraFirstPersonView: FirstPersonView;\r\n    public _camera2DViewState: any;\r\n    public _cameraTraditionalViewState: any; // ViewStateProps;\r\n    public _cameraFirstPersonViewState: any; // ViewStateProps;'\r\n    public _cameraBirdPointOfViewState: any;\r\n    public _cameraOrthographicView: any;\r\n    public _cameraBirdPointOfView: any;\r\n\r\n    // Coordinate conversions.\r\n    public coordinateConverter: proj4.Converter;\r\n\r\n    // Layer settings.\r\n    private _areMapLayersInitialized: boolean;\r\n\r\n    // Current map state.\r\n    public currentZoomLevel: number;\r\n\r\n    constructor(private root: RootStore) {\r\n        makeAutoObservable(this, {\r\n            _cameraTraditionalView: false,\r\n            _cameraFirstPersonView:  false,\r\n            _camera2DViewState: false,\r\n            _cameraTraditionalViewState:  false,\r\n            _cameraFirstPersonViewState: false,\r\n            _cameraBirdPointOfView: false,\r\n        });\r\n        this._areMapLayersInitialized = false;\r\n        this._viewportType = '2D';\r\n        this._cameraType = 'Traditional';\r\n        this._cameraOrthographicView = new MapView({\r\n            id: 'orthographic-camera',\r\n            controller: true,\r\n            orthographic: true,\r\n            nearZMultiplier: 0.3,\r\n        });\r\n        this._cameraTraditionalView = new MapView({\r\n            id: 'traditional-camera',\r\n            controller: true,\r\n            // farZMultiplier: 1.01,\r\n            nearZMultiplier: 0.2,\r\n            // orthographic: true,\r\n        });\r\n        this._cameraFirstPersonView = new FirstPersonView({\r\n            id: 'first-person',\r\n            controller: {\r\n                moveSpeed: 20,\r\n            },\r\n            near: 9.0,\r\n            far: 7000.0,\r\n        });\r\n        this._cameraBirdPointOfView = new FirstPersonView({\r\n            id: 'bird-pov-camera',\r\n            controller: true,\r\n            near: 9.0,\r\n            far: 7000.0,\r\n        });\r\n\r\n        // Initialize view state.\r\n        const cameraConfig = this.root.config.settings.map.cameraDefaults;\r\n\r\n        this.currentZoomLevel = cameraConfig.View2D.zoom;\r\n\r\n        this._camera2DViewState = {\r\n            longitude: cameraConfig.View2D.location[0],\r\n            latitude: cameraConfig.View2D.location[1],\r\n            zoom: cameraConfig.View2D.zoom,\r\n            pitch: cameraConfig.View2D.pitch,\r\n            bearing: cameraConfig.View2D.bearing,\r\n            maxPitch: cameraConfig.View2D.maxPitch,\r\n        };\r\n\r\n        this._cameraTraditionalViewState = {\r\n            longitude: cameraConfig.View3D.location[0],\r\n            latitude:  cameraConfig.View3D.location[1],\r\n            zoom:  cameraConfig.View3D.zoom,\r\n            pitch: cameraConfig.View3D.pitch,\r\n            bearing: cameraConfig.View3D.bearing,\r\n            maxPitch:  cameraConfig.View3D.maxPitch,\r\n        };\r\n\r\n        this._cameraFirstPersonViewState = {\r\n            longitude: cameraConfig.ViewFirstPerson.location[0],\r\n            latitude:  cameraConfig.ViewFirstPerson.location[1],\r\n            zoom:  cameraConfig.ViewFirstPerson.zoom,\r\n            pitch: cameraConfig.ViewFirstPerson.pitch,\r\n            bearing: cameraConfig.ViewFirstPerson.bearing,\r\n            maxPitch:  cameraConfig.ViewFirstPerson.maxPitch,\r\n            position: cameraConfig.ViewFirstPerson.position,\r\n        };\r\n\r\n        this._cameraBirdPointOfViewState = {\r\n            longitude: 0,\r\n            latitude: 0,\r\n            zoom: 1,\r\n            pitch: 0,\r\n            bearing: 0,\r\n            maxPitch: 85,\r\n            position: [0, 0, 90],\r\n        }\r\n\r\n        // Create converter for coordinate system.\r\n        proj4.defs(\"EPSG:4326\",\"+proj=longlat +datum=WGS84 +no_defs\");\r\n        proj4.defs(\"EPSG:32632\",\"+proj=utm +zone=32 +datum=WGS84 +units=m +no_defs\");\r\n        this.coordinateConverter = proj4(\"EPSG:4326\", \"EPSG:32632\");\r\n    }\r\n\r\n\r\n    public get camera2DViewState() {\r\n        return this._camera2DViewState;\r\n    }\r\n\r\n    public set camera2DViewState(viewState) {\r\n        this._camera2DViewState = viewState;\r\n    }\r\n\r\n    public getViewState() {\r\n        if (this._viewportType === '2D') {\r\n            return this._camera2DViewState;\r\n        } else if (this._cameraType === 'Traditional') {\r\n            return this._cameraTraditionalViewState;\r\n        } else if (this._cameraType === 'FirstPerson') {\r\n            return this._cameraFirstPersonViewState;\r\n        } else if (this._cameraType === 'BirdPOV') {\r\n            return this._cameraBirdPointOfViewState;\r\n        } else {\r\n            throw new Error('Unknown camera type selected.');\r\n        }\r\n    }\r\n\r\n    public get viewport() {\r\n        if (this._viewportType === '2D' || this.root.currentPage === 'historical') {\r\n            return this._cameraOrthographicView;\r\n        } else if (this._viewportType === '3D' && this._cameraType === 'FirstPerson') {\r\n            return this._cameraFirstPersonView;\r\n        } else if (this._viewportType === '3D' && this._cameraType === 'BirdPOV') {\r\n            return this._cameraBirdPointOfView;\r\n        } else {\r\n           return this._cameraTraditionalView;\r\n        }\r\n    }\r\n\r\n    public get viewportType() {\r\n        return this._viewportType;\r\n    }\r\n\r\n    public set viewportType(viewportType: ViewPortType) {\r\n        this._viewportType = viewportType;\r\n    }\r\n\r\n    public get cameraType() {\r\n        return this._cameraType;\r\n    }\r\n\r\n    public set cameraType(cameraType: CameraType) {\r\n        this._cameraType = cameraType;\r\n    }\r\n\r\n    public toggleMapViewType() {\r\n        this._viewportType = this._viewportType === '2D' ? '3D' : '2D';\r\n        if (this._viewportType === '2D' && this._cameraType === 'FirstPerson') {\r\n            this._cameraType = 'Traditional';\r\n        }\r\n        this.areMapLayersInitialized = false;\r\n        this.initializeLayers();\r\n    }\r\n\r\n    public toggleCameraType() {\r\n        this._cameraType = this._cameraType === 'Traditional' ? 'FirstPerson' : 'Traditional';\r\n    }\r\n\r\n    public get areMapLayersInitialized() {\r\n        return this._areMapLayersInitialized;\r\n    }\r\n\r\n    public set areMapLayersInitialized(isInitialized: boolean) {\r\n        this._areMapLayersInitialized = isInitialized;\r\n    }\r\n\r\n    initializeLayers() {\r\n        this.areMapLayersInitialized = false;\r\n\r\n        switch (this.root.currentPage) {\r\n            case 'live':\r\n                this.root.tracksStore.initilizeLayers();\r\n                this.root.radarsStore.initilizeLayers();\r\n                // this.root.turbinesStore.initilizeLayers();\r\n                this.root.analysisStore.initializeLayers();\r\n                break;\r\n            case 'historical':\r\n                this.root.tracksStore.initilizeLayers();\r\n                this.root.radarsStore.initilizeLayers();\r\n                // this.root.turbinesStore.initilizeLayers();\r\n                this.root.analysisStore.initializeLayers();\r\n                break;\r\n            case 'analysis':\r\n                this.root.tracksStore.initilizeLayers();\r\n                this.root.radarsStore.initilizeLayers();\r\n                // this.root.turbinesStore.initilizeLayers();\r\n                this.root.analysisStore.initializeLayers();\r\n                break;\r\n            case 'reporting':\r\n                this.root.tracksStore.initilizeLayers();\r\n                this.root.radarsStore.initilizeLayers();\r\n                // this.root.turbinesStore.initilizeLayers();\r\n                this.root.analysisStore.initializeLayers();\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        \r\n        this.areMapLayersInitialized = true;\r\n    }\r\n\r\n    public positionsToBearing(longitude1: number, latitude1: number, longitude2: number, latitude2: number): number {\r\n        const y = Math.sin(longitude2 - longitude1) * Math.cos(latitude2);\r\n        const x = Math.cos(latitude1) * Math.sin(latitude2) - Math.sin(latitude1) * Math.cos(latitude2) * Math.cos(longitude2 - longitude1);\r\n        const bearingRadians = Math.atan2(y, x);\r\n        const bearingDegrees = (bearingRadians * 180.0 / Math.PI + 360.0) % 360.0;\r\n        return bearingDegrees;\r\n    }\r\n}\r\n\r\nexport default MapStore;\r\n","\r\nconst getVertexShader = (numBands) => `\r\n#define SHADER_NAME bitmap-layer-vertex-shader\r\n\r\nstruct ColorBand {\r\n  float value;\r\n  vec4 color;\r\n};\r\n\r\nattribute vec3 positions;\r\nattribute float colors;\r\n\r\nuniform ColorBand colorBands[${numBands}];\r\n\r\nvarying vec4 vertexColor;\r\n\r\nvec4 valueToColor(float value) {\r\n  vec4 outColor = vec4(0.0);\r\n  for (int i = 0; i < ${numBands}; ++i) {\r\n    float interpolatePt = (value - colorBands[i].value) / (colorBands[i+1].value - colorBands[i].value);\r\n    outColor = mix(colorBands[i].color, colorBands[i+1].color, interpolatePt);\r\n\r\n    if (value <= colorBands[i+1].value) {\r\n      break;\r\n    }\r\n  }\r\n  return outColor;\r\n}\r\n\r\nvoid main(void) {\r\n  if (colors != 0.0) {\r\n    vertexColor = valueToColor(colors);\r\n} else {\r\n    vertexColor = vec4(0.0, 0.0, 0.0, 0.0);\r\n  }\r\n\r\n  vec3 center = project_position(positions);\r\n  gl_Position = project_common_position_to_clipspace(vec4(center, 1.0));\r\n}\r\n`;\r\n\r\nexport default getVertexShader;\r\n","import GL from '@luma.gl/constants';\r\nimport { Layer, project, project32, picking } from '@deck.gl/core';\r\nimport { Model, Geometry } from '@luma.gl/core';\r\nimport getVertexShader from './binary-grid-layer-vertex.glsl.js';\r\nimport fs from './binary-grid-layer-fragment.glsl.js';\r\n\r\nexport default class BinaryGridLayer extends Layer {\r\n  getShaders() {\r\n    const numBands = this.props.colorPoints.length;\r\n    const vs = getVertexShader(numBands);\r\n    return super.getShaders({vs, fs, modules: [project, project32, picking]});\r\n  }\r\n\r\n  initializeState() {\r\n    const attributeManager = this.getAttributeManager();\r\n    const noAlloc = true;\r\n\r\n    attributeManager.add({\r\n      positions: {\r\n        size: 3,\r\n        type: GL.FLOAT,\r\n        fp64: this.use64bitPositions(),\r\n        update: attribute => (attribute.value = this.state.mesh.positions),\r\n        noAlloc\r\n      },\r\n      colors: {\r\n        size: 1,\r\n        type: GL.FLOAT,\r\n        update: attribute => (attribute.value = this.state.mesh.colors),\r\n        noAlloc\r\n      }\r\n    });\r\n\r\n    const mesh = this._createMesh();\r\n    this.setState({mesh, ...this._getCoordinateUniforms()});\r\n  }\r\n\r\n  updateState({props, oldProps, changeFlags}) {\r\n    // setup model first\r\n    if (changeFlags.extensionsChanged) {      \r\n      const {gl} = this.context;\r\n      if (this.state.model) {\r\n        this.state.model.delete();\r\n      }\r\n      this.setState({model: this._getModel(gl)});\r\n      this.getAttributeManager().invalidateAll();\r\n    }\r\n\r\n    const attributeManager = this.getAttributeManager();\r\n\r\n    if (props.colorsBuffer !== oldProps.colorsBuffer) {\r\n      const mesh = this._createMesh();\r\n      attributeManager.invalidate('colors');\r\n      this.setState({ mesh });\r\n    }\r\n\r\n    if (props.colorPoints !== oldProps.colorPoints) {\r\n      this.getShaders();\r\n    }\r\n\r\n    if (props._imageCoordinateSystem !== oldProps._imageCoordinateSystem) {\r\n      this.setState(this._getCoordinateUniforms());\r\n    }\r\n  }\r\n\r\n  // Override base Layer multi-depth picking logic\r\n  disablePickingIndex() {\r\n    this.setState({disablePicking: true});\r\n  }\r\n\r\n  restorePickingColors() {\r\n    this.setState({disablePicking: false});\r\n  }\r\n\r\n  _createMesh() {\r\n    const { verticesBuffer, colorsBuffer } = this.props;\r\n\r\n    return {\r\n      vertexCount: verticesBuffer.length / 3,\r\n      positions: verticesBuffer,\r\n      colors: colorsBuffer,\r\n    }\r\n  }\r\n\r\n  _getModel(gl) {\r\n    if (!gl) {\r\n      return null;\r\n    }\r\n\r\n    return new Model(\r\n      gl,\r\n      Object.assign({}, this.getShaders(), {\r\n        id: this.props.id,\r\n        geometry: new Geometry({\r\n          drawMode: GL.TRIANGLES,\r\n          vertexCount: this.props.verticesBuffer.length / 3,\r\n        }),\r\n        isInstanced: false\r\n      }),\r\n    );\r\n  }\r\n\r\n  draw(opts) {\r\n    const {uniforms, moduleParameters} = opts;\r\n    const {model, disablePicking} = this.state;\r\n  \r\n    if (moduleParameters.pickingActive && disablePicking) {\r\n      return;\r\n    }\r\n\r\n    const colorBandUniforms = {};\r\n    this.props.colorPoints.forEach((colorPoint, index) => {\r\n      colorBandUniforms[`colorBands[${index}].value`] = colorPoint.value;\r\n      colorBandUniforms[`colorBands[${index}].color`] = convertStringToColor(colorPoint.color);\r\n    });\r\n\r\n    // Render the image\r\n    if (model) {\r\n      model\r\n        .setUniforms(uniforms)\r\n        .setUniforms({ ...colorBandUniforms })\r\n        .draw();\r\n    }\r\n  }\r\n\r\n  _getCoordinateUniforms() {\r\n    // TODO Support different map coordinate systems.\r\n    // const {LNGLAT, CARTESIAN, DEFAULT} = COORDINATE_SYSTEM;\r\n\r\n    return {\r\n      coordinateConversion: 0,\r\n    };\r\n  }\r\n}\r\n\r\nconst convertStringToColor = (rgbString) => {\r\n  if (rgbString.includes('rgba(')) {\r\n    return convertRgbaStringToNumber(rgbString);\r\n  } else {\r\n    return convertRgbStringToNumber(rgbString);\r\n  }\r\n};\r\n\r\nconst convertRgbaStringToNumber = (rgbaString) => {\r\n  const values = rgbaString.replace(' ', '').replace('rgba(', '').replace(')', '').split(',');\r\n  const r = parseInt(values[0]) / 255.0;\r\n  const g = parseInt(values[1]) / 255.0;\r\n  const b = parseInt(values[2]) / 255.0;\r\n  const a = Math.round(parseFloat(values[3]) * 255) / 255.0;\r\n\r\n  return [r, g, b, a];\r\n};\r\n\r\nconst convertRgbStringToNumber = (rgbString) => {\r\n  const values = rgbString.replace(' ', '').replace('rgb(', '').replace(')', '').split(',');\r\n  const r = parseInt(values[0]) / 255.0;\r\n  const g = parseInt(values[1]) / 255.0;\r\n  const b = parseInt(values[2]) / 255.0;\r\n\r\n  return [r, g, b, 1.0];\r\n};\r\n\r\nBinaryGridLayer.layerName = 'BinaryGridLayer';\r\n","const fragmentShader = `\r\n#define SHADER_NAME bitmap-layer-fragment-shader\r\n\r\n#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\nvarying vec4 vertexColor;\r\n\r\nvoid main(void) {\r\n  gl_FragColor = vertexColor;\r\n}\r\n`;\r\n\r\nexport default fragmentShader;\r\n","import { flow, makeAutoObservable, toJS } from 'mobx';\r\nimport { RootStore } from './root';\r\nimport * as zip from \"@zip.js/zip.js\";\r\nimport BinaryGridLayer from '../common/layers/BinaryGridLayer';\r\nimport { ScenegraphLayer } from '@deck.gl/mesh-layers';\r\nimport { Alert } from './NotificationsStore';\r\nimport { addMonths, startOfDay } from 'date-fns';\r\nimport { scaleLinear } from 'd3-scale';\r\nimport * as d3 from 'd3-interpolate';\r\n\r\nzip.configure({ useWebWorkers: false });\r\n\r\nexport type ColorPoint = {\r\n  value: number,\r\n  color: string,\r\n  label: string,\r\n}\r\n\r\nexport type AnalysisType = 'Density' | 'Direction';\r\n\r\nexport class AnalysisStore {\r\n  // Layers.\r\n  private _binaryGridLayer: BinaryGridLayer | null;\r\n  private _directionLayer: ScenegraphLayer<any> | null;\r\n  public isLoaded: boolean;\r\n\r\n  // Positions attribute.\r\n  public densityPositionsBuffer: Float32Array | null;\r\n  public directionPositionsBuffer: Float32Array | null;\r\n\r\n  // DFS values attributes.\r\n  public densityColorAttributeBuffers: Float32Array[];\r\n  public directionBuffers: Float32Array[];\r\n  public densityColorAttributeBufferEmpty: Float32Array | null; \r\n  public directionBufferEmpty: Float32Array | null;\r\n\r\n  // Timesteps.\r\n  private _fromDate: Date;\r\n  private _toDate: Date;\r\n  public timestepDateTimesDensity: Date[];\r\n  public timestepDateTimesDirection: Date[];\r\n  private _currentTimestepIndex: number;\r\n\r\n  // Legend.\r\n  private _selectedParameter: AnalysisType;\r\n  private minDensityValue: number;\r\n  private maxDensityValue: number;\r\n  private _legendScale: ColorPoint[];\r\n\r\n  private _selectedSummaryID: string;\r\n  private gridLayerID!: string;\r\n  private _interval: NodeJS.Timeout | null;\r\n  public isPlaying: boolean;\r\n\r\n  constructor(private root: RootStore) {\r\n    makeAutoObservable(this, {\r\n      densityPositionsBuffer: false,\r\n      densityColorAttributeBuffers: false,\r\n      directionPositionsBuffer: false,\r\n    });\r\n\r\n    // Layers.\r\n    this._binaryGridLayer = null;\r\n    this._directionLayer = null;\r\n    this.isLoaded = false;\r\n\r\n    // Shader Attributes.\r\n    this.densityPositionsBuffer = null;\r\n    this.directionPositionsBuffer = null;\r\n    this.densityColorAttributeBuffers = [];\r\n    this.directionBuffers = [];\r\n    this.densityColorAttributeBufferEmpty = null;\r\n    this.directionBufferEmpty = null;\r\n\r\n    // Timesteps.\r\n    this._currentTimestepIndex = 0;\r\n    this._toDate = startOfDay(new Date());\r\n    this._fromDate = startOfDay(addMonths(this._toDate, -1));\r\n    this.timestepDateTimesDensity = [];\r\n    this.timestepDateTimesDirection = [];\r\n\r\n    // Play controls.\r\n    this._interval = null;\r\n    this.isPlaying = false;\r\n\r\n    // Legend.\r\n    this._selectedParameter = 'Density';\r\n    this._legendScale = [];\r\n    this.minDensityValue = 0;\r\n    this.maxDensityValue = 0;\r\n    this._selectedSummaryID = this.root.config.settings.analysis.summaryIDs[0].ID;\r\n\r\n    this.initializeLayers();\r\n  }\r\n\r\n\r\n  // ---------------------------------------------------------------------\r\n  // Accessors for asynchronous updates.\r\n  // ---------------------------------------------------------------------\r\n\r\n  public get selectedParameter(): AnalysisType {\r\n    return this._selectedParameter;\r\n  }\r\n\r\n  public set selectedParameter(parameter: AnalysisType) {\r\n    this._selectedParameter = parameter;\r\n    this.initializeLayers();\r\n  }\r\n\r\n  public get selectedSummaryID() {\r\n    return this._selectedSummaryID;\r\n  }\r\n\r\n  public set selectedSummaryID(id: string) {\r\n    this._selectedSummaryID = id;\r\n  }\r\n  \r\n  public get currentTimestepIndex() {\r\n    return this._currentTimestepIndex;\r\n  }\r\n\r\n  public set currentTimestepIndex(index: number) {\r\n    this._currentTimestepIndex = index;\r\n  }\r\n\r\n  public get interval() {\r\n    return this._interval;\r\n  }\r\n\r\n  public set interval(interval: NodeJS.Timeout | null) {\r\n    this._interval = interval;\r\n  }\r\n\r\n  public get legendScale(): ColorPoint[] {\r\n    return this._legendScale;\r\n  }\r\n\r\n  public set legendScale(scale: ColorPoint[]) {\r\n    this._legendScale = scale;\r\n  }\r\n\r\n  public get fromDate(): Date {\r\n    return this._fromDate;\r\n  }\r\n\r\n  public set fromDate(date: Date) {\r\n    this._fromDate = date;\r\n  }\r\n\r\n  public get toDate(): Date {\r\n    return this._toDate;\r\n  }\r\n\r\n  public set toDate(date: Date) {\r\n    this._toDate = date;\r\n  }\r\n\r\n  public get binaryGridLayer() {\r\n    return this._binaryGridLayer;\r\n  }\r\n\r\n  public set binaryGridLayer(layer: BinaryGridLayer | null) {\r\n    this._binaryGridLayer = layer;\r\n  }\r\n\r\n  public get directionLayer(): ScenegraphLayer<any> | null {\r\n    return this._directionLayer;\r\n  }\r\n\r\n  public set directionLayer(layer: ScenegraphLayer<any> | null) {\r\n    this._directionLayer = layer;\r\n  }\r\n\r\n  public get timestepsLength(): number {\r\n    switch (this.selectedParameter) {\r\n      case 'Density':\r\n        return this.timestepDateTimesDensity.length;\r\n      case 'Direction':\r\n        return this.timestepDateTimesDirection.length;\r\n      default:\r\n        throw new Error('Unknown parameter selected.');\r\n    }\r\n  }\r\n\r\n  public get currentTimestepDate(): Date | null {\r\n    switch (this.selectedParameter) {\r\n      case 'Density':\r\n        if (this.timestepDateTimesDensity.length > 0 && this.currentTimestepIndex < this.timestepDateTimesDensity.length) {\r\n          return this.timestepDateTimesDensity[this.currentTimestepIndex];\r\n        }\r\n        return null;\r\n      case 'Direction':\r\n        if (this.timestepDateTimesDirection.length > 0 && this.currentTimestepIndex < this.timestepDateTimesDirection.length) {\r\n          return this.timestepDateTimesDirection[this.currentTimestepIndex];\r\n        }\r\n        return null;\r\n      default:\r\n        throw new Error('Unknown parameter selected.');\r\n    }\r\n  }\r\n\r\n  // ---------------------------------------------------------------------\r\n  // Animation Controls.\r\n  // ---------------------------------------------------------------------\r\n\r\n  public play() {\r\n    this.isPlaying = true;\r\n    \r\n    this.interval = setInterval(() => {\r\n      if (this.currentTimestepIndex < this.timestepsLength - 1) {\r\n        this.currentTimestepIndex++;\r\n      } else {\r\n        this.currentTimestepIndex = 0;\r\n      }\r\n\r\n      this.renderDensityGridLayer();\r\n      this.renderDirectionLayer();\r\n    }, 60);\r\n  }\r\n\r\n  public pause() {\r\n    this.isPlaying = false;\r\n    if (this.interval) {\r\n      clearInterval(this.interval);\r\n    }\r\n  }\r\n\r\n  public stepForward() {\r\n    this.pause();\r\n    if (this._currentTimestepIndex < this.timestepsLength - 1) {\r\n      this._currentTimestepIndex++;\r\n    }\r\n    this.renderDensityGridLayer();\r\n    this.renderDirectionLayer();\r\n  }\r\n\r\n  public stepBackward() {\r\n    this.pause();\r\n    if (this._currentTimestepIndex > 0) {\r\n      this._currentTimestepIndex--;\r\n    }\r\n    this.renderDensityGridLayer();\r\n    this.renderDirectionLayer();\r\n  }\r\n\r\n  public skipToStart() {\r\n    this.pause();\r\n    this._currentTimestepIndex = 0;\r\n    this.renderDensityGridLayer();\r\n    this.renderDirectionLayer();\r\n  }\r\n\r\n  public skipToEnd() {\r\n    this.pause();\r\n    this._currentTimestepIndex = this.timestepsLength - 1;\r\n    this.renderDensityGridLayer();\r\n    this.renderDirectionLayer();\r\n  }\r\n  \r\n\r\n  // ---------------------------------------------------------------------\r\n  // Layers.\r\n  // ---------------------------------------------------------------------\r\n  \r\n  public initializeLayers() {\r\n    this.gridLayerID = `Grid-Layer-${new Date().getTime().toString()}`;\r\n    this.renderDensityGridLayer();\r\n    this.renderDirectionLayer();\r\n  }\r\n\r\n  public renderDensityGridLayer() {\r\n    let attribBufferIndex;\r\n    if (this.currentTimestepDate) {\r\n      attribBufferIndex = this.timestepDateTimesDensity.findIndex(date => date.getTime() === this.currentTimestepDate?.getTime());\r\n    } else {\r\n      attribBufferIndex = -1;\r\n    }\r\n\r\n    let attribBuffer;\r\n    if (attribBufferIndex !== -1) {\r\n      attribBuffer = this.densityColorAttributeBuffers[attribBufferIndex];\r\n    } else {\r\n      attribBuffer = this.densityColorAttributeBufferEmpty;\r\n    }\r\n\r\n    this.binaryGridLayer = new BinaryGridLayer({\r\n      id: this.gridLayerID,\r\n      verticesBuffer: this.densityPositionsBuffer,\r\n      colorsBuffer: attribBuffer,\r\n      colorPoints: toJS(this.legendScale),\r\n      parameters: { depthTest: false }\r\n    } as any);\r\n  }\r\n\r\n  public renderDirectionLayer() {\r\n    let attribBufferIndex;\r\n    if (this.currentTimestepDate) {\r\n      attribBufferIndex = this.timestepDateTimesDirection.findIndex(date => date.getTime()  === this.currentTimestepDate?.getTime());\r\n    } else {\r\n      attribBufferIndex = -1;\r\n    }\r\n  \r\n    let attribBuffer;\r\n    if (attribBufferIndex !== -1) {\r\n      attribBuffer = this.directionBuffers[attribBufferIndex];\r\n    } else {\r\n      attribBuffer = this.directionBufferEmpty;\r\n    }\r\n\r\n    const frontendHost = this.root.apiStore.frontendHost;\r\n\r\n    if (this.directionPositionsBuffer) {\r\n      this._directionLayer = new ScenegraphLayer({\r\n        id: `${this.gridLayerID}-direction`,\r\n        data: {\r\n          length: this.directionPositionsBuffer.length / 3,\r\n          directionAttribBuffer: attribBuffer,\r\n          attributes: {\r\n            getPosition: { value: this.directionPositionsBuffer, size: 3 }\r\n          },\r\n        },\r\n        scenegraph: `${frontendHost}/arrow.glb` as any,\r\n        getOrientation: (object: any, {index, data}: {index: number, data: any}) => {\r\n          const u = data.directionAttribBuffer[index * 2    ];\r\n          const v = data.directionAttribBuffer[index * 2 + 1];\r\n          const degrees = Math.atan2(v, u) * 180.0 / Math.PI;\r\n          return [0, degrees, 90]\r\n        },\r\n        getColor: [0, 0, 0, 200],\r\n        getScale: (object: any, {index, data}: {index: number, data: any}) => {\r\n          const u = data.directionAttribBuffer[index * 2    ];\r\n          const v = data.directionAttribBuffer[index * 2 + 1];\r\n          const mag = Math.sqrt(u * u + v * v);\r\n\r\n          return [mag * 25, mag * 25, mag * 25];\r\n        },\r\n        _lighting: 'flat',\r\n        parameters: { depthTest: false },\r\n      } as any);\r\n    }\r\n  }\r\n\r\n\r\n  // ---------------------------------------------------------------------\r\n  // Animation Data Download and Extraction.\r\n  // ---------------------------------------------------------------------\r\n\r\n  public retrieveTimeSteps = flow(function* (this: AnalysisStore) {\r\n    const summary = this.root.config.settings.analysis.summaryIDs.find((summary: any) => summary.ID === this._selectedSummaryID);\r\n    if (!summary) {\r\n      this.root.notificationsStore.addAlert(new Alert('loading-data', 'error', 'Failed to locate summary analysis details in configuration...', true, 5000));\r\n      return;\r\n    }\r\n\r\n    this.root.notificationsStore.addAlert(new Alert('loading-data', 'info', 'Loading data...', false, 5000));\r\n   \r\n    // Reset density and direction information.\r\n    this.timestepDateTimesDensity = [];\r\n    this.timestepDateTimesDirection = [];\r\n    this.densityColorAttributeBuffers = [];\r\n    this.directionBuffers = [];\r\n\r\n    if (summary.densityID) {\r\n      const densityBlob = yield this.root.apiStore.fetchAnalysisTimesteps(summary.densityID, this.fromDate, this.toDate, (errorMessage) => {\r\n        this.root.notificationsStore.addAlert(new Alert('loading-data', 'error', errorMessage, true, 5000));\r\n      });\r\n      if (!densityBlob) {\r\n        return;\r\n      }\r\n      yield this.extractDataFromBlob(densityBlob, 'Density');\r\n    }\r\n\r\n    if (summary.directionID) {\r\n      const directionBlob = yield this.root.apiStore.fetchAnalysisTimesteps(summary.directionID, this.fromDate, this.toDate, (errorMessage) => {\r\n        this.root.notificationsStore.addAlert(new Alert('loading-data', 'error', errorMessage, true, 5000));\r\n      });\r\n      if (!directionBlob) {\r\n        return;\r\n      }\r\n      yield this.extractDataFromBlob(directionBlob, 'Direction');\r\n    }\r\n\r\n    this.currentTimestepIndex = 0;\r\n    this.renderDensityGridLayer();\r\n    this.renderDirectionLayer();\r\n    this.isLoaded = true;\r\n\r\n    this.root.notificationsStore.addAlert(new Alert('loading-data', 'success', 'Data download complete!', true, 5000));\r\n  })\r\n\r\n  private extractDataFromBlob = flow(function* (this: AnalysisStore, blob: Blob, type: AnalysisType) {\r\n    const reader = new zip.ZipReader(new zip.BlobReader(blob));\r\n    const entries: zip.Entry[] = yield reader.getEntries();\r\n\r\n    if (entries.length) {\r\n      const numBuffers = entries.length - 2; // Subtract out the vertices.bin and the stats.json files.\r\n      if (numBuffers === 0) {\r\n        this.root.notificationsStore.addAlert(new Alert('loading-data', 'warning', 'No data available for the selected time period.', false, 5000));\r\n        return;\r\n      }\r\n\r\n      const verticesIndex = entries.findIndex(entry => entry.filename === 'vertices.bin');\r\n      const positions =  yield this.zipEntryToBuffer(entries, verticesIndex);\r\n\r\n      const statsIndex = entries.findIndex(entry => entry.filename === 'stats.json');\r\n      const stats = yield this.zipEntryToJSON(entries, statsIndex);\r\n\r\n      if (type === 'Density') {\r\n        this.timestepDateTimesDensity = stats.dateTimes.map((dateTime: string) => new Date(dateTime));\r\n      } else if (type === 'Direction') {\r\n        this.timestepDateTimesDirection = stats.dateTimes.map((dateTime: string) => new Date(dateTime));\r\n      }\r\n\r\n      const buffers = [];\r\n      for (let i = 0; i < entries.length - 2; ++i) {\r\n        const bufferIndex = entries.findIndex(entry => entry.filename === `${i}.bin`);\r\n        const buffer = yield this.zipEntryToBuffer(entries, bufferIndex);\r\n\r\n        if (type === 'Density') {\r\n          const attribBuffer = this.dfsValuesToColorBuffer(buffer);\r\n          buffers.push(attribBuffer);\r\n          if (i === 0) {\r\n            this.densityColorAttributeBufferEmpty = new Float32Array(attribBuffer.length);\r\n          }\r\n\r\n        } else if (type === 'Direction') {\r\n          buffers.push(buffer);\r\n          if (i === 0) {\r\n            this.directionBufferEmpty = new Float32Array(buffer.length);\r\n          }\r\n        }\r\n      }\r\n\r\n      if (type === 'Density') {\r\n        this.densityPositionsBuffer = positions;\r\n        this.densityColorAttributeBuffers = buffers;\r\n        this.minDensityValue = 0.0;\r\n        this.maxDensityValue = 12.0;\r\n        this.legendScale = this.generateLegendColorPoints();\r\n      } else if (type === 'Direction') {\r\n        this.directionPositionsBuffer = positions;\r\n        this.directionBuffers = buffers;\r\n      }\r\n    }\r\n\r\n    yield reader.close();\r\n  });\r\n\r\n  private zipEntryToBuffer = flow(function* (this:AnalysisStore,  entries: zip.Entry[], index: number) {\r\n    const entry = entries[index] as any;\r\n    const data = yield entry.getData(new zip.BlobWriter());\r\n    const arrayBuffer = yield data.arrayBuffer();\r\n    return new Float32Array(arrayBuffer);\r\n  });\r\n\r\n  private zipEntryToJSON = flow(function* (this:AnalysisStore,  entries: zip.Entry[], index: number) {\r\n    const entry = entries[index] as any;\r\n    const data = yield entry.getData(new zip.BlobWriter());\r\n    const jsonText = yield data.text();\r\n    const json = JSON.parse(jsonText);\r\n    return json;\r\n  });\r\n\r\n  private dfsValuesToColorBuffer(dfsValuesBuffer: Float32Array): Float32Array {\r\n    // const attributeBuffer = new Float32Array(dfsValuesBuffer.length * 6);\r\n    const attributeBuffer = new Float32Array(dfsValuesBuffer.length * 3);\r\n    let j = 0;\r\n    for (let i = 0; i < dfsValuesBuffer.length; ++i) {\r\n      const value = dfsValuesBuffer[i];\r\n      attributeBuffer[j++] = value;\r\n      attributeBuffer[j++] = value;\r\n      attributeBuffer[j++] = value;\r\n      // attributeBuffer[j++] = value;\r\n      // attributeBuffer[j++] = value;\r\n      // attributeBuffer[j++] = value;\r\n    }\r\n    return attributeBuffer;\r\n  }\r\n\r\n  public generateLegendColorPoints() {\r\n    let currentModulosIndex = 0;\r\n    let modulos = [1, 2, 5, 10, 15, 20, 25, 50, 100, 150, 200, 250, 300, 400, 500, 1000, 2000, 5000, 10000, 20000, 25000, 50000, 100000, 200000, 250000, 500000];\r\n    while (currentModulosIndex < modulos.length) {\r\n      const currScale = modulos[currentModulosIndex];\r\n      const numIntervalsToMin = Math.floor(this.minDensityValue / currScale);\r\n      const numIntervalsToMax = Math.ceil(this.maxDensityValue / currScale) + 1;\r\n      if (numIntervalsToMax - numIntervalsToMin > 10) {\r\n        currentModulosIndex++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n\r\n    const modulo = modulos[currentModulosIndex];\r\n    const colorPoints: ColorPoint[] = [];\r\n    const startingInterval = Math.floor(this.minDensityValue / modulo);\r\n    const endingInterval = Math.ceil(this.maxDensityValue / modulo) + 1;\r\n\r\n    const scaleColors = scaleLinear()\r\n      .domain([\r\n        startingInterval,\r\n        (startingInterval + endingInterval) * 0.25, \r\n        (startingInterval + endingInterval) * 0.5,\r\n        (startingInterval + endingInterval) * 0.75, \r\n        endingInterval\r\n      ])\r\n      .range(['#211fccaa', '#438ba1cc', '#edea37cc', '#eb9c2fcc', '#c91818cc'] as any)\r\n      .interpolate(d3.interpolateHsl as any);\r\n\r\n    for (let i = startingInterval; i < endingInterval; ++i) {\r\n      const value = i * modulo;\r\n\r\n      colorPoints.push({\r\n        value,\r\n        color: scaleColors(i) as any,\r\n        label: `${value}`,\r\n      });\r\n    }\r\n\r\n    return colorPoints;\r\n  }\r\n}\r\n","/* eslint-disable react-hooks/rules-of-hooks */\r\nimport { makeAutoObservable } from 'mobx';\r\nimport { createContext, useContext } from 'react';\r\nimport { BirdTracksStore } from './BirdTracksStore';\r\n// import { EnvironmentalDataStore } from './EnvironmentalDataStore';\r\n// import { TurbinesStore } from './TurbinesStore';\r\n// import { LiveDataFeedStore } from './LiveDataFeedStore';\r\nimport { AuthStore } from './AuthStore';\r\nimport { APIStore } from './APIStore';\r\nimport { RadarsStore } from './RadarsStore';\r\n// import { HistoricalTracksStore } from './HistoricalTracksStore';\r\nimport MapStore from './MapStore';\r\nimport NotificationsStore from './NotificationsStore';\r\nimport { ReportingStore } from './ReportingStore';\r\nimport { AnalysisStore } from './AnalysisStore';\r\n\r\ntype Page = 'live' | 'historical' | 'analysis' | 'reporting' | 'control-panel' | 'login';\r\n\r\nexport class RootStore {\r\n  public apiStore: APIStore;\r\n  public authStore: AuthStore;\r\n  private _currentPage: Page;\r\n  // public mapViewType: '2D' | '3D';\r\n  public notificationsStore: NotificationsStore;\r\n\r\n  public mapStore: MapStore;\r\n  // public liveDataFeed: LiveDataFeedStore;\r\n  // public turbinesStore: TurbinesStore;\r\n  public tracksStore: BirdTracksStore;\r\n  public radarsStore: RadarsStore;\r\n  // public environmentalData: EnvironmentalDataStore;\r\n  // public historicalTracksStore: HistoricalTracksStore;\r\n  // public reportingStore: ReportingStore;\r\n  public analysisStore: AnalysisStore;\r\n  public config: any;\r\n\r\n  private _isDrawerOpen: boolean;\r\n\r\n  constructor(config: any) {\r\n    makeAutoObservable(this);\r\n\r\n    this.config = config;\r\n    this.authStore = new AuthStore(this);\r\n    this.apiStore = new APIStore(this, this.authStore, \r\n      this.config.connectionStrings.visualizerURL, this.config.connectionStrings.authURL, this.config.connectionStrings.frontendURL);\r\n    this._currentPage = 'analysis';\r\n    this.notificationsStore = new NotificationsStore(this);\r\n\r\n    this.mapStore = new MapStore(this);\r\n    // this.liveDataFeed = new LiveDataFeedStore(this);\r\n    // this.environmentalData = new EnvironmentalDataStore(this);\r\n    // this.turbinesStore = new TurbinesStore(this);\r\n    this.tracksStore = new BirdTracksStore(this);\r\n    this.radarsStore = new RadarsStore(this);\r\n    // this.historicalTracksStore = new HistoricalTracksStore(this);\r\n    // this.reportingStore = new ReportingStore(this);\r\n    this.analysisStore = new AnalysisStore(this);\r\n\r\n    this._isDrawerOpen = true;\r\n  }\r\n\r\n  get currentPage() {\r\n    return this._currentPage;\r\n  }\r\n\r\n  set currentPage(page: Page) {\r\n    this._currentPage = page;\r\n  }\r\n\r\n  toggleIsDrawerOpen() {\r\n    this._isDrawerOpen = !this._isDrawerOpen;\r\n  }\r\n\r\n  get isDrawerOpen(): boolean {\r\n    return this._isDrawerOpen;\r\n  }\r\n\r\n  set isDrawerOpen(isOpen: boolean) {\r\n    this._isDrawerOpen = isOpen;\r\n  }\r\n}\r\n\r\nexport const StoreReactContext = createContext<RootStore | undefined>(\r\n  undefined,\r\n);\r\n\r\nexport function useStore() {\r\n  return (\r\n    useContext(StoreReactContext) ??\r\n    (() => {\r\n      throw new Error('RootStoreReactContext missing.');\r\n    })()\r\n  );\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Box from '@material-ui/core/Box';\r\nimport Button, { ButtonProps } from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport HistoryIcon from '@material-ui/icons/History';\r\nimport AssessmentIcon from '@material-ui/icons/Assessment';\r\nimport PieChartIcon from '@material-ui/icons/PieChart';\r\nimport LiveFeedIcon from '@material-ui/icons/RssFeed';\r\nimport { useStore } from '../../store/root';\r\nimport styled from 'styled-components';\r\n\r\nconst Navbar: React.FC<{}> = observer(() => {\r\n  const root  = useStore();\r\n\r\n  return (\r\n    <>\r\n      <AppBar position=\"static\">\r\n        <Toolbar style={{ minHeight: '55px' }}>\r\n          <Box>\r\n            <Typography variant=\"h6\" style={{ fontWeight: 500 }}>\r\n              MUSE\r\n            </Typography>\r\n          </Box>\r\n          <Box flexGrow={1} display=\"flex\" justifyContent=\"center\" color=\"white\">\r\n          {root.currentPage !== 'login' as any && (\r\n            <>\r\n              <NavItem\r\n                onClick={() => root.currentPage = 'analysis'}\r\n                active={root.currentPage === 'analysis'}\r\n                startIcon={<AssessmentIcon />}\r\n              >\r\n                Analysis\r\n              </NavItem>\r\n            </>\r\n          )}\r\n          </Box>\r\n          <Box>\r\n            {/* <IconButton\r\n              edge=\"end\"\r\n              color=\"inherit\"\r\n              aria-label=\"notifications\"\r\n              style={{ marginRight: '0.2rem' }}\r\n            >\r\n              <Badge badgeContent={4} color=\"secondary\">\r\n                <NotificationsIcon />\r\n              </Badge>\r\n            </IconButton> */}\r\n            {/* <IconButton\r\n              edge=\"end\"\r\n              color=\"inherit\"\r\n              aria-label=\"notifications\"\r\n              style={{ marginRight: '0.2rem' }}\r\n            >\r\n              <SettingsIcon />\r\n            </IconButton> */}\r\n            <IconButton\r\n              edge=\"end\"\r\n              color=\"inherit\"\r\n              aria-label=\"menu\"\r\n              onClick={() => root.toggleIsDrawerOpen()}\r\n            >\r\n              <MenuIcon />\r\n            </IconButton>\r\n          </Box>\r\n        </Toolbar>\r\n      </AppBar>\r\n      {/* <div style={{ height: '0px' }}></div> */}\r\n    </>\r\n  );\r\n});\r\n\r\ntype NavItemProps = {\r\n  active: boolean\r\n};\r\n\r\nconst NavItem = styled(({active, ...props}: NavItemProps & ButtonProps) => <Button {...props} />)`\r\n  height: 55px;\r\n  color: ${props => props.active ? \"white\" : \"#DFDFDF\" };\r\n  border-bottom: ${props => props.active ? \"4px solid white\" : \"none\" };\r\n  background-color: ${props => props.active ? \"#3d6079\" : \"auto\" };\r\n  font-size: 1.0rem;\r\n  margin: 0 0;\r\n  width: 160px;\r\n  font-weight: 500;\r\n  &:disabled {\r\n    color: #aaa;\r\n    border-bottom: none;\r\n  }\r\n`;\r\n\r\nexport { Navbar };\r\n","import { TileLayer } from '@deck.gl/geo-layers';\r\nimport { BitmapLayer } from '@deck.gl/layers';\r\n\r\nconst createTileLayer = () => {\r\n  return new TileLayer({\r\n    data: [\r\n      'https://a.tile.openstreetmap.org/{z}/{x}/{y}.png',\r\n      'https://b.tile.openstreetmap.org/{z}/{x}/{y}.png',\r\n      'https://c.tile.openstreetmap.org/{z}/{x}/{y}.png'\r\n    ],\r\n  \r\n    // Since these OSM tiles support HTTP/2, we can make many concurrent requests\r\n    // and we aren't limited by the browser to a certain number per domain.\r\n    maxRequests: 20,\r\n    pickable: false,\r\n    onViewportLoad: () => null,\r\n    autoHighlight: false,\r\n    highlightColor: [60, 60, 60, 40],\r\n    // https://wiki.openstreetmap.org/wiki/Zoom_levels\r\n    minZoom: 0,\r\n    maxZoom: 19,\r\n    tileSize: 512 / devicePixelRatio,\r\n  \r\n    renderSubLayers: (props: any) => {\r\n      const {\r\n        bbox: {west, south, east, north}\r\n      } = props.tile;\r\n  \r\n      return [\r\n        new BitmapLayer(props, {\r\n          data: null,\r\n          image: props.data,\r\n          bounds: [west, south, east, north]\r\n        }),\r\n      ];\r\n    }\r\n  });\r\n}\r\n\r\nexport default createTileLayer;\r\n","import React from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport DeckGL from '@deck.gl/react';\r\nimport { LightingEffect, DirectionalLight, AmbientLight } from 'deck.gl';\r\nimport createTileLayer from '../../common/layers/TileLayer';\r\nimport { useStore } from '../../store/root';\r\n\r\nconst AnalysisMap = observer(() => {\r\n  const root = useStore();\r\n  const { analysisStore, mapStore, tracksStore, radarsStore } = root;\r\n\r\n  React.useEffect(() => {   \r\n    root.isDrawerOpen = false;\r\n    mapStore.viewportType = '2D';\r\n    mapStore.areMapLayersInitialized = false;\r\n\r\n    tracksStore.clearTracks();\r\n    mapStore.initializeLayers();\r\n\r\n    return () => {\r\n      tracksStore.clearTracks();\r\n      mapStore.areMapLayersInitialized = false;\r\n    };\r\n  }, [root, mapStore, tracksStore]);\r\n\r\n  const tileLayer = createTileLayer();\r\n  const layers: any[] = true ? [\r\n    tileLayer, \r\n    radarsStore.radarsLayer, \r\n    radarsStore.radarsRadiusLayer,\r\n  ] : [];\r\n  if (analysisStore.isLoaded) {\r\n    if (analysisStore.directionBuffers.length > 0 && analysisStore.selectedParameter === 'Direction') {\r\n      layers.splice(1, 0, analysisStore.directionLayer);\r\n    }\r\n    if (analysisStore.densityColorAttributeBuffers.length > 0 && analysisStore.selectedParameter === 'Density') {\r\n      layers.splice(1, 0, analysisStore.binaryGridLayer);\r\n    }\r\n  }\r\n\r\n  const lightingEffect = new LightingEffect({\r\n    directionalLight: new DirectionalLight({\r\n      color: [255, 255, 255],\r\n      intensity: 2.0,\r\n      direction: [1, -0.5, 1]\r\n    }),\r\n    ambientLight: new AmbientLight({\r\n      color: [255, 255, 255],\r\n      intensity: 0.8\r\n    }),\r\n  });\r\n\r\n  return (\r\n    <DeckGL\r\n      initialViewState={mapStore.getViewState()}\r\n      views={[mapStore.viewport]}\r\n      width=\"100%\"\r\n      height=\"100%\"\r\n      style={{ position: 'relative' }}\r\n      controller={true}\r\n      effects={[lightingEffect]}\r\n      layers={layers}\r\n      _animate={true}\r\n      parameters={{\r\n        clearColor: [0.8, 0.9, 1.0, 1.0]\r\n      }}\r\n      getTooltip={({ object }: any) => {\r\n        if (object && object.id && object.locations) {\r\n          return {\r\n            html: `<b>ID:</b> ${object.id}<br>\r\n                    <b>Latitude:</b> ${object.locations[0][0].toFixed(5)}<br>\r\n                    <b>Longitude:</b> ${object.locations[0][1].toFixed(5)}<br>\r\n                    <b>Elevation:</b> ${object.locations[0][2].toFixed(2)} m`,\r\n            style: {\r\n              textAlign: 'left',\r\n            },\r\n          };\r\n        } else if (object && object.id && object.location) {\r\n          return {\r\n            html: `<b>Name:</b> ${object.id}<br>\r\n                    <b>Latitude:</b> ${object.location[0].toFixed(5)}<br>\r\n                    <b>Longitude:</b> ${object.location[1].toFixed(5)}<br>\r\n                    <b>Alert Level:</b> ${object.alertLevel}`,\r\n            style: {\r\n              textAlign: 'left',\r\n            },\r\n          };\r\n        } else {\r\n          return null;\r\n        }\r\n      }}\r\n    />\r\n  );\r\n});\r\n\r\nexport default AnalysisMap;\r\n","import React from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport styled from 'styled-components';\r\nimport Box from '@material-ui/core/Box';\r\nimport Button from '@material-ui/core/Button';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ToggleButton from '@material-ui/lab/ToggleButton';\r\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { KeyboardDatePicker } from '@material-ui/pickers';\r\nimport { useStore } from '../../store/root';\r\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\r\nimport PauseIcon from '@material-ui/icons/Pause';\r\nimport SkipNextIcon from '@material-ui/icons/SkipNext';\r\nimport SkipPreviousIcon from '@material-ui/icons/SkipPrevious';\r\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\r\nimport NavigateBeforeIcon from '@material-ui/icons/NavigateBefore';\r\nimport { Alert } from '../../store/NotificationsStore';\r\nimport { addMonths, format, isValid } from 'date-fns';\r\n\r\nconst AnalysisDownloadControls: React.FC<{}> = observer(() => {\r\n  const { analysisStore, notificationsStore } = useStore();\r\n  const [timestepTemp, setTimestepTemp] = React.useState<number | null>(null);\r\n\r\n  const handleDatasetChange = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n    const selectedID = event.target.value as string;\r\n    analysisStore.selectedSummaryID = selectedID;\r\n  }\r\n\r\n  const handleFromDateChange = (date: Date | null) => {\r\n    if (date && isValid(date)) {\r\n      analysisStore.fromDate = date;\r\n    }\r\n  };\r\n\r\n  const handleToDateChange = (date: Date | null) => {\r\n    if (date && isValid(date)) {\r\n      analysisStore.toDate = date;\r\n    }\r\n  };\r\n\r\n  const handleDownload = () => {\r\n    analysisStore.currentTimestepIndex = 0;\r\n    analysisStore.pause();\r\n\r\n    if (analysisStore.fromDate > analysisStore.toDate) {\r\n      notificationsStore.addAlert(new Alert('data-download', 'error', '\"From\" date must be before \"To\" date.', true, 5000));\r\n      return;\r\n    }\r\n\r\n    const previousMonth = addMonths(analysisStore.toDate, -1);\r\n    if (analysisStore.fromDate < previousMonth) {\r\n      notificationsStore.addAlert(new Alert('data-download', 'error', 'Cannot download more than 1 month of data.', true, 5000));\r\n      return;\r\n    }\r\n\r\n    analysisStore.retrieveTimeSteps();\r\n  }\r\n\r\n  const handleTimestepChange = (event: any, newValue: number | number[]) => {\r\n    analysisStore.pause();\r\n    setTimestepTemp(newValue as number);\r\n  };\r\n\r\n  const handleTimestepChangeCommit = (event: any, newValue: number | number[]) => {\r\n    setTimestepTemp(null);\r\n    analysisStore.currentTimestepIndex = newValue as number;;\r\n    analysisStore.pause();\r\n    analysisStore.renderDensityGridLayer();\r\n    analysisStore.renderDirectionLayer();\r\n  };\r\n\r\n  const currDateStr = analysisStore.currentTimestepDate ? \r\n    format(analysisStore.currentTimestepDate, 'yyyy-MM-dd HH:mm:ss')\r\n    : 'Please select a time period';\r\n\r\n  const maxTimestepIndex = analysisStore.timestepsLength > 0 ? analysisStore.timestepsLength - 1 : 1;\r\n\r\n  return (\r\n    <>\r\n      <Box display=\"flex\" flexDirection=\"row\" alignItems=\"center\" borderRadius=\"0.5rem 0.5rem 0rem 0rem\" p={1} style={{ backgroundColor: '#F2F2F2'}}>\r\n        <Box px={0.5}>\r\n          <FormControl variant=\"outlined\" size=\"small\" margin=\"dense\">\r\n            <InputLabel id=\"dataset-selection-label\">Dataset</InputLabel>\r\n            <Select\r\n              id=\"dataset-selection\"\r\n              labelId=\"dataset-selection-label\"\r\n              label=\"Dataset\"\r\n              fullWidth\r\n              style={{ backgroundColor: '#F8F8F8' }}\r\n              value={analysisStore.selectedSummaryID}\r\n              onChange={handleDatasetChange}\r\n            >\r\n              <MenuItem value=\"Hourly\">Hourly</MenuItem>\r\n              <MenuItem value=\"Monthly\">Monthly</MenuItem>\r\n            </Select>\r\n          </FormControl>\r\n        </Box>\r\n        <Box px={0.5}>\r\n          <KeyboardDatePicker\r\n            disableToolbar\r\n            variant=\"inline\"\r\n            format=\"yyyy-MM-dd\"\r\n            id=\"from-date-time\"\r\n            label=\"From\"\r\n            inputVariant=\"outlined\"\r\n            margin=\"dense\"\r\n            size=\"small\"\r\n            style={{ backgroundColor: '#F8F8F8' }}\r\n            value={analysisStore.fromDate}\r\n            onChange={handleFromDateChange}\r\n            KeyboardButtonProps={{\r\n              'aria-label': 'change date',\r\n            }}\r\n          />\r\n        </Box>\r\n        <Box px={0.5}>\r\n          <KeyboardDatePicker\r\n            disableToolbar\r\n            variant=\"inline\"\r\n            format=\"yyyy-MM-dd\"\r\n            id=\"to-date-time\"\r\n            label=\"To\"\r\n            inputVariant=\"outlined\"\r\n            margin=\"dense\"\r\n            size=\"small\"\r\n            style={{ backgroundColor: '#F8F8F8' }}\r\n            value={analysisStore.toDate}\r\n            onChange={handleToDateChange}\r\n            KeyboardButtonProps={{\r\n              'aria-label': 'change date',\r\n            }}\r\n          />\r\n        </Box>\r\n        <Box px={0.5}>\r\n          <Button size=\"medium\" variant=\"contained\" color=\"secondary\" onClick={handleDownload}>Download</Button>\r\n        </Box>\r\n      </Box>\r\n      <Divider />\r\n      <Box flexGrow={1} p={1} display=\"flex\" flexDirection=\"row\" alignItems=\"center\">\r\n        <Box px={0.5}>\r\n          <ToggleButtonGroup>\r\n            <ToggleButton value=\"skip-to-start\" onClick={() => analysisStore.skipToStart()}>\r\n              <SkipPreviousIcon />\r\n            </ToggleButton>\r\n            <ToggleButton value=\"step-backward\" onClick={() => analysisStore.stepBackward()}>\r\n              <NavigateBeforeIcon />\r\n            </ToggleButton>\r\n            {analysisStore.isPlaying ? (\r\n              <ToggleButton value=\"pause\" onClick={() => analysisStore.pause()}>\r\n                <PauseIcon />\r\n              </ToggleButton>\r\n            ) : (\r\n              <ToggleButton value=\"play\" onClick={() => analysisStore.play()}>\r\n                <PlayArrowIcon />\r\n              </ToggleButton>\r\n            )}\r\n            <ToggleButton value=\"step-forward\" onClick={() => analysisStore.stepForward()}>\r\n              <NavigateNextIcon />\r\n            </ToggleButton>\r\n            <ToggleButton value=\"skip-to-end\" onClick={() => analysisStore.skipToEnd()}>\r\n              <SkipNextIcon />\r\n            </ToggleButton>\r\n          </ToggleButtonGroup>\r\n        </Box>\r\n        <Box display=\"flex\" flexDirection=\"column\" flexGrow={1} justifyContent=\"center\" alignItems=\"center\" px={1}>\r\n          <Box> \r\n            <Typography>{currDateStr}</Typography>\r\n          </Box>\r\n          <Box px={5} width=\"calc(100% - 2rem)\">\r\n            <Slider\r\n              value={timestepTemp ? timestepTemp : analysisStore.currentTimestepIndex}\r\n              min={0}\r\n              max={maxTimestepIndex}\r\n              valueLabelDisplay=\"off\"\r\n              aria-labelledby=\"range-slider\"\r\n              onChange={handleTimestepChangeCommit}\r\n              // onChangeCommitted={handleTimestepChangeCommit}\r\n            />\r\n          </Box>\r\n        </Box>\r\n      </Box>\r\n    </>\r\n  );\r\n});\r\n\r\nconst Calendar = styled(KeyboardDatePicker)`\r\n  & .MuiOutlinedInput-adornedEnd {\r\n    padding-right: 0px;\r\n  }\r\n`;\r\n\r\nexport default AnalysisDownloadControls;\r\n","import React from \"react\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { useStore } from \"../../store/root\";\r\nimport { AnalysisType, ColorPoint } from \"../../store/AnalysisStore\";\r\n\r\nconst AnalysisLegend: React.FC<{}> = observer(() => {\r\n  const { analysisStore } = useStore();\r\n\r\n  const handleParameterChange = (\r\n    event: React.ChangeEvent<{ value: unknown }>\r\n  ) => {\r\n    const selectedAnalysisType = event.target.value as AnalysisType;\r\n    analysisStore.selectedParameter = selectedAnalysisType;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Box width=\"15ch\">\r\n        {analysisStore.legendScale.map((colorPoint: ColorPoint) => (\r\n          <Box key={colorPoint.label}>\r\n            <Box\r\n              display=\"inline-block\"\r\n              width=\"0.8rem\"\r\n              height=\"0.8rem\"\r\n              mr={1}\r\n              style={{ backgroundColor: colorPoint.color }}\r\n            ></Box>\r\n            <Typography variant=\"overline\" component=\"span\">\r\n              {colorPoint.label}\r\n            </Typography>\r\n          </Box>\r\n        ))}\r\n      </Box>\r\n    </>\r\n  );\r\n});\r\n\r\nexport default AnalysisLegend;\r\n","import React from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert';\r\nimport { useStore } from '../../store/root';\r\n\r\nconst AlertSnackbar = observer(() => {\r\n  const { notificationsStore } = useStore();\r\n\r\n  const alert = notificationsStore.alert;\r\n\r\n  const handleSnackbarClose = (id: string | null, reason?: string) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n\r\n    if (id) {\r\n      notificationsStore.removeAlertAfterDelay(id, 500);\r\n    }\r\n  }\r\n\r\n  const handleAlertClose = (id: string | null) => {\r\n    if (id) {\r\n      notificationsStore.removeAlertAfterDelay(id, 500);\r\n    }\r\n  };\r\n\r\n  const autoHideDuration = alert?.shouldAutoHide ? alert.duration : null;\r\n\r\n  return (\r\n    <Snackbar\r\n      open={!!alert && !notificationsStore.isSnackbarClosed}\r\n      autoHideDuration={autoHideDuration}\r\n      onClose={(_, reason) => handleSnackbarClose(alert?.id ?? null, reason)}\r\n      anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\r\n    >\r\n      <Alert\r\n        severity={alert?.alertType}\r\n        onClose={() => handleAlertClose(alert?.id ?? null)}\r\n        style={{ position: 'relative', transform: 'translateY(50px)'}}\r\n      >\r\n        {alert?.message}\r\n      </Alert>\r\n    </Snackbar>\r\n  );\r\n});\r\n\r\nexport const Alert = (props: AlertProps) => {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nexport default AlertSnackbar;","import * as React from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport Box from '@material-ui/core/Box';\r\nimport { useStore } from '../../store/root';\r\nimport AnalysisMap from './AnalysisMap';\r\nimport styled from 'styled-components';\r\nimport AnalysisControls from './AnalysisControls';\r\nimport AnalysisLegend from './AnalysisLegend';\r\nimport AlertSnackbar from '../../common/Notifications/AlertSnackbar';\r\n\r\nexport type AnalysisPageProps = {};\r\n\r\nconst AnalysisPage: React.FC<AnalysisPageProps> = observer(() => {\r\n  const root = useStore();\r\n\r\n  return (\r\n    <Box height=\"100%\" position=\"relative\" overflow=\"hidden\">\r\n      <AnalysisMap />\r\n      <AnalysisControlsContainer>\r\n        <AnalysisControls />\r\n      </AnalysisControlsContainer>\r\n      {root.analysisStore.isLoaded && (\r\n        <AnalysisLegendContainer>\r\n          <AnalysisLegend />\r\n        </AnalysisLegendContainer>\r\n      )}\r\n      <AlertSnackbar />\r\n    </Box>\r\n  );\r\n});\r\n\r\nconst AnalysisControlsContainer = styled(Box)`\r\n  position: absolute;\r\n  left: 50%;\r\n  bottom: 1rem;\r\n  transform: translateX(-50%);\r\n  width: max(35vw, 650px);\r\n  box-shadow: 0px 0px 1px 1px #aaa;\r\n  background-color: white;\r\n  border-radius: 0.5rem;\r\n  border: 1px solid #bbb;\r\n`;\r\n\r\nconst AnalysisLegendContainer = styled(Box)`\r\n  position: absolute;\r\n  left: 1rem;\r\n  top: 1rem;\r\n  box-shadow: 0px 0px 1px 1px #aaa;\r\n  background-color: white;\r\n  padding: 1rem 1rem 0.5rem 1rem;\r\n  border-radius: 0.5rem;\r\n  border: 1px solid #bbb;\r\n`;\r\n\r\nexport { AnalysisPage };\r\n","import React from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport './App.css';\r\nimport { MuiThemeProvider } from '@material-ui/core/styles';\r\nimport Box from '@material-ui/core/Box';\r\nimport createTheme from '@material-ui/core/styles/createTheme';\r\nimport 'date-fns';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers';\r\nimport { useStore } from './store/root';\r\nimport { Navbar } from './common/Navigation/Navbar';\r\n// import { LiveMapPage } from './pages/LiveMapPage/LiveMapPage';\r\n// import LoginPage from './pages/LoginPage/LoginPage';\r\nimport { AnalysisPage } from './pages/AnalysisPage/AnalysisPage';\r\n// import { HistoricalMapPage } from './pages/HistoricalPage/HistoricalMapPage';\r\n// import ReportingPage from './pages/ReportingPage/ReportingPage';\r\n// import { AnalysisPage } from './pages/AnalysisPage/AnalysisPage';\r\n\r\nconst theme = createTheme({\r\n  palette: {\r\n    primary: {\r\n      main: '#0D3958', // DHI Primary color\r\n    },\r\n    secondary: {\r\n      main: '#3d6079', // Automatically generated secondary color\r\n    },\r\n  },\r\n});\r\n\r\nconst App: React.FC<{}> = observer(() => {\r\n  const root = useStore();\r\n\r\n  let page = null;\r\n  //if (!root.authStore.accessToken) {\r\n  //  page = <LoginPage />;\r\n  //} else {\r\n    switch(root.currentPage) {\r\n      case 'analysis':\r\n        page = <AnalysisPage />\r\n        break;\r\n    }\r\n  //}\r\n\r\n  return (\r\n    <MuiThemeProvider theme={theme}>\r\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n        <Box display=\"flex\" flexDirection=\"column\" zIndex={1} height=\"100vh\">\r\n          <Box zIndex={3}>\r\n            <Navbar />\r\n          </Box>\r\n          <Box flexGrow={1} zIndex={2}>\r\n            {page}\r\n          </Box>\r\n        </Box>\r\n      </MuiPickersUtilsProvider>\r\n    </MuiThemeProvider>\r\n  );\r\n});\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { RootStore, StoreReactContext } from './store/root';\r\n\r\nfunction Root() {\r\n  const [config, setConfig] = React.useState(null);\r\n  const [store, setStore] = React.useState<RootStore | null>(null);\r\n\r\n  React.useEffect(() => {\r\n    fetch('./config.json')\r\n      .then(response => response.json())\r\n      .then(json => setConfig(json));\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    if (config) {\r\n      setStore(new RootStore(config));\r\n    }\r\n  }, [config]);\r\n\r\n  if (!store) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <React.StrictMode>\r\n      <StoreReactContext.Provider value={store}>\r\n        <App />\r\n      </StoreReactContext.Provider>\r\n    </React.StrictMode>\r\n  );\r\n}\r\n\r\nReactDOM.render(<Root />, document.getElementById('root'));\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}